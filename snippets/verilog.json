{
"count": {
	"prefix": "count",
	"body": [
"//define the time counter",
"reg [${1:27}:0]      cnt${2:0};",
"reg             ${3:impulse};",
"parameter       SET_TIME = $1'd${4:};",
"always@(posedge clk_in) begin",
"    if (cnt$2 == SET_TIME) begin",
"        cnt$2 <= $1'd0;                   //count done,clearing the time counter",
"        $3 <= 1'd1;",
"    end",
"    else begin",
"        cnt$2 <= cnt$2 + 1'd1;            //cnt$2 counter = cnt$2 counter + 1",
"        $3 <= 1'd0;",
"    end",
"end"
	]
},
"lock": {
	"prefix": "lock",
	"body": [
"reg  gate${2:0};",
"reg  gate$2_buf;",

"wire gate$2_pose =  gate$2 & ~gate$2_buf;",
"wire gate$2_nege =  ~gate$2 & gate$2_buf;",

"always@(posedge clk_in) begin",
"   gate$2 <= ${1:signal};",
"   gate$2_buf <= gate$2;",
"end"
	]
},
"State": {
	"prefix": "state",
	"body": [
"reg [${1:4}:0]           state;",

"always@(posedge clk_in or negedge rst_n) begin",
"   if(!rst_n) begin",
"       state <= ${2:5}'d0;${3:}",
"    end",
"    else begin",
"        case(state)",
"            $2'd0:begin if(start_sig)begin state<=state+1; end end",
"            $2'd1:begin ${4:}; state<=state+1; end",
"            $2'd2:begin ${5:}; state<=state+1; end",
"            $2'd3:begin ${6:}; state<=state+1; end",
"            $2'd4:begin ${7:}; state<=state+1; end",
"            $2'd5:begin ${8:}; state<=state+1; end",
"            $2'd6:begin ${9:}; state<=state+1; end",
"            $2'd7:begin ${10:}; state<=state+1; end",
"            $2'd8:begin ${11:}; state<=${12:state+1}; end",
"            default:begin state <= 0; end",
"        endcase",
"    end",
"end"
	]
},
"initial": {
	"prefix": "initial",
	"body": [
"initial begin",
"   \\$dumpfile(\"wave.vcd\");",
"   \\$dumpvars(0, testbench);",                     
"   #6000 \\$finish;",                      
"end"
	]
},
"generate_for": {
	"prefix": "generate",
	"body": [
"generate for($1=0;$1<${2:};$1=$1+1) begin : ${3:U}",
"genvar ${1:i};",
"${4:}",
"end",
"endgenerate"
	]
},
"generate_if": {
	"prefix": "generate",
	"body": [
"generate if(${1:} == ${2:}) begin : ${3:U}",
"${4:}",
"end",
"endgenerate"
	]
},
"generate_case": {
	"prefix": "generate",
	"body": [
"generate",
"case (${1:NUM})",
"32'd1 : begin : ${2:case1_name}",
"${3:}",
"        end",
"32'd2 : begin : ${4:case1_name}",
"${5:}",
"        end",
"default : begin : NOP",
"          end",
"endcase",
"endgenerate"
	]
},

"Debug": {
	"prefix": "debug",
	"body": ["(* mark_debug = \"true\" *)"]
},
"Time": {
	"prefix": "time",
	"body": ["`timescale 1ns / 1ps"]
},
"assign": {
	"prefix": "assign",
	"body": ["assign ${1:} = ${2:};${3:}"]
},
"initial param": {
	"prefix": "initial",
	"body": [
"integer ${1:i};",
"initial begin",
"   for ($1 = 0; $1<${2:range}; $1=$1+1) begin",
"        ${3:data}[$1] = 0;",
"    end",   
"end"
	]
},

"module": {
	"prefix": "module",
	"body": [
"module ${1:module_name} #(",
"    parameter    INPUT_WIDTH  = ${2:12},",
"    parameter    OUTPUT_WIDTH = $2,${3:}",
") (",
"    input                           clk_in,",
"    input                           rst_n,",
"    input  [INPUT_WIDTH - 1 : 0]    ${4:data_in},",
"    output [OUTPUT_WIDTH - 1 : 0]   ${5:data_out}",
");",
"${6:}",
"endmodule  //$1"
	]
},
"always": {
	"prefix": "always",
	"body": [
		"always @(*) begin",
		"\t$1",
		"end"
	],
	"description": "always @()"
},
"alwaysposclk": {
	"prefix": "alclk",
	"body": [
		"always @(posedge clk_in $1) begin",
		"\t$2",
		"end"
	],
	"description": "always @(posedge clk)"
},
"beginend": {
	"prefix": "beginend",
	"body": [
		"begin",
		"\t$1",
		"end"
	],
	"description": "begin ... end"
},
"case": {
	"prefix": "case",
	"body": [
		"case ($1)",
		"\t$2: $3",
		"\tdefault: $4",
		"endcase"
	],
	"description": "case () ... endcase"
},
"reg": {
	"prefix": "reg",
	"body": [
		"reg $1;"
	],
	"description": "reg reg_name;"
},
"regarray": {
	"prefix": "rega",
	"body": [
		"reg [$1:$2] $3;"
	],
	"description": "reg [N:0] reg_name;"
},
"regmemory": {
	"prefix": "regm",
	"body": [
		"reg [$1:$2] $3 [$4:$5];"
	],
	"description": "reg [N:0] reg_name [0:M];"
},
"wire": {
	"prefix": "wire",
	"body": [
		"wire $1;"
	],
	"description": "wire wire_name;"
},
"wirearray": {
	"prefix": "wirea",
	"body": [
		"wire [$1:$2] $3;"
	],
	"description": "wire [N:0] wire_name;"
},
"include": {
	"prefix": "inc",
	"body": [
		"`include \"$1\""
	],
	"description": "`include \"..\""
},
"define": {
	"prefix": "def",
	"body": [
		"`def $1 = $2"
	],
	"description": "`define var = val"
},
"parameter": {
	"prefix": "param",
	"body": [
		"parameter $1 = $2"
	],
	"description": "paramter var = val;"
},
"ternary": {
	"prefix": "ter",
	"body": [
		"$1 ? $2 : $3"
	],
	"description": "a ? b : c"
},
"else": {
	"prefix": "else",
	"body": [
		"else begin",
	"    ${1:} <= ${2:};",
	"end"
	]
},
"else_if": {
	"prefix": "else",
	"body": [
		"else if(${1:} ==${2:} ${3:}) begin",
	"    ${4:} <= ${5:};",
	"end"
	]
},
"for loop": {
	"prefix": "for",
	"body": [
		"integer ${1:i} = 0;",
		"for ($1 = 0; i<$2; i=i+1) begin",
		"\t$3",
		"end"
	],
	"description": "for (...) begin ... end"
},
"while loop": {
	"prefix": "while",
	"body": [
		"while ($1) begin",
		"\t$2",
		"end"
	],
	"description": "while (...) begin ... end"
},
"function": {
	"prefix": "func",
	"body": [
		"function $1;",
		"\t$2;",
		"\t$3",
		"endfunction"
	],
	"description": "function (...) ... endfunction"
},
"testbench template": {
	"prefix": "tb",
	"body": [
		"`include \"$1.v\"",
		"`default_nettype none",
		"",
		"module tb_${1};",
		"reg clk;",
		"reg rst_n;",
		"",
		"${1} $3",
		"(",
		"\t.rst_n (rst_n),",
		"\t.clk (clk),",
		");",
		"",
		"localparam CLK_PERIOD = 10;",
		"always #(CLK_PERIOD/2) clk=~clk;",
		"",
		"initial begin",
		"\t$dumpfile(\"tb_${1}.vcd\");",
		"\t$dumpvars(0, tb_${1});",
		"end",
		"",
		"initial begin",
		"\t#1 rst_n<=1'bx;clk<=1'bx;",
		"\t#(CLK_PERIOD*3) rst_n<=1;",
		"\t#(CLK_PERIOD*3) rst_n<=0;clk<=0;",
		"\trepeat(5) @(posedge clk);",
		"\trst_n<=1;",
		"\t@(posedge clk);",
		"\trepeat(2) @(posedge clk);",
		"\t$finish(2);",
		"end",
		"",
		"endmodule",
		"`default_nettype wire"
	],
	"description": "testbench template"
}
}
