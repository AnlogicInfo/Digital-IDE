var fs      = require("fs");
var fspath  = require("path");
// init

var kernel = require("./kernel/kernel"); // in fact it is kernel

var virtualFileSystem = {
    module: null,

    /**
     * 显示指定文件夹下的所有子目录, 并返回
     * @param {*} path 所要显示的文件夹的绝对路径 (省略对应root的\)
     * @returns 返回所有子目录
     */
    showlist : function (path) {
        let lists = this.module.FS.readdir(`/${path}`);
        console.log(lists);
        return lists;
    },

    /**
     * 将本地路径挂载到虚拟文件系统下
     * @param {*} local   需要挂载的本地路径
     * @param {*} virtual 所要挂载到的虚拟文件系统的绝对路径 (省略对应root的\)
     */
    mount : function (local, virtual) {
        this.mkdir(virtual);
        this.module.FS.mount(this.module.NODEFS, { root: local }, `/${virtual}`);
    },

    /**
     * 虚拟文件系统下创建文件夹
     * @param {*} path 虚拟文件系统内部的绝对路径 (省略对应root的\)
     * 可越级创建，会自动生成父级文件夹
     */
    mkdir : function (path) {
        if (this.module.FS.findObject(`/${path}`) != null) {
            return true;
        } else {
            if (this.mkdir(fspath.dirname(path))) {
                this.module.FS.mkdir(`/${path}`);
            }
            return true;
        }
    },

    /**
     * 删除虚拟文件系统下的文件夹
     * @param {*} path 虚拟文件系统内部的绝对路径 (省略对应root的\)
     * 可越级创建，会自动删除父级文件夹
     */
    rmdir : function (path) {
        let files = [];
        if (this.module.FS.findObject(`/${path}`) != null) {
            files = this.module.FS.readdir(`/${path}`);
            for (let index = 2; index < files.length; index++) {
                const element = files[index];
                let curPath = fspath.join(`/${path}`, element).replace(/\\/g, "\/");
                let value = this.module.FS.isDir(this.module.FS.stat(curPath).mode);
                if (value) {
                    this.rmdir(curPath);
                } else {
                    this.module.FS.unlink(curPath);
                }
            }
            this.module.FS.rmdir(`/${path}`); //清除文件夹
        }
    },

    /**
     * 删除虚拟文件系统下的指定文件
     * @param {*} path 虚拟文件系统内部的绝对路径 (省略对应root的\)
     */
    rmfile : function (path) {
        this.module.FS.unlink(`/${path}`);
    },

    /**
     * 将本地路径下的文件写入虚拟文件系统
     * @param {*} src 文件的本地的绝对路径
     * @param {*} des 虚拟文件系统内部指定地址 (省略对应root的\)
     * 可越级创建，会自动生成父级文件夹
     */
    writeFileFormPath : function (src, des) {
        let desDir = fspath.dirname(des);
        let content = fs.readFileSync(src, "utf-8");
        if (this.module.FS.findObject(`/${desDir}`) != null) {
            this.module.FS.writeFile(`/${des}`, content, { encoding: 'utf8' });
        } else {
            this.mkdir(`/${desDir}`);
            this.module.FS.writeFile(`/${des}`, content, { encoding: 'utf8' });
        }
    },

    /**
     * 将文件内容写入虚拟文件系统
     * @param {*} text 要写入的文件内容
     * @param {*} path 虚拟文件系统内部指定地址 (省略对应root的\)
     * 可越级创建，会自动生成父级文件夹
     */
     writeFileFormText : function (text, path) {
        let pathDir = fspath.dirname(path);
        if (this.module.FS.findObject(`/${pathDir}`) != null) {
            this.module.FS.writeFile(`/${path}`, text, { encoding: 'utf8' });
        } else {
            this.mkdir(`/${pathDir}`);
            this.module.FS.writeFile(`/${path}`, text, { encoding: 'utf8' });
        }
    },

    /**
     * 从虚拟文件系统中读出文件到本地
     * @param {*} src 虚拟文件系统内部指定地址 (省略对应root的\)
     * @param {*} des 要写到的本地文件的绝对路径
     */
    readFileToPath : function (src, des) {
        if (this.module.FS.findObject(`/${src}`) != null) {
            let content = this.module.FS.readFile(`/${src}`, { encoding: 'utf8' });
            fs.writeFileSync(des, content, "utf-8");
        } else {
            console.log(`ERROR: The ${src} is not at this virtual system.`);
        }
    },

    /**
     * 从虚拟文件系统中读出文件内容
     * @param {*} path 虚拟文件系统内部指定地址 (省略对应root的\)
     * @returns 读出文件的内容
     */
    readFileToText : function (path) {
        if (this.module.FS.findObject(`/${path}`) != null) {
            let content = this.module.FS.readFile(`/${path}`, { encoding: 'utf8' });
            return content;
        } else {
            console.log(`ERROR: The ${path} is not at this virtual system.`);
        }
    },

    loadFile : function (verilogFiles, parent) {
        this.module.TTY.message = "";
        for (let index = 0; index < verilogFiles.length; index++) {
            let verilogFile = verilogFiles[index];
            let verilogFilePath = verilogFile.replace(parent, "/project");
            this.module.ccall('run', '', ['string'], [`read_verilog ${verilogFilePath}`]);
        }
        return this.module.TTY.message;
    }
}
exports.virtualFileSystem = virtualFileSystem;

async function launch(opeParam) {
    // 例化核心
    let module = await kernel();

    // 将核心出入到虚拟文件系统
    virtualFileSystem.module = module;
    // 将本地工程路径挂载到虚拟文件系统内
    virtualFileSystem.mount(opeParam.workspacePath, "project");

    // 导出内核
    return virtualFileSystem;
}
exports.launch = launch;
