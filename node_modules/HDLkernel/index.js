var fs      = require("fs");
var fspath  = require("path");
// init
var synth = require("HDLkernel/kernel");

function showSynthHelpLog(moduel) {
    moduel.ccall('run', '', ['string'], ["help"]);
    let message = moduel.ccall('prompt', 'string', [], []);
    return message;
}

function synthSystemMkdir(module, path) {
    if (module.FS.findObject(`/${path}`) != null) {
        return true;
    } else {
        if (synthSystemMkdir(fspath.dirname(path))) {
            module.FS.mkdir(`/${path}`);
        }
        return true;
    }
}

function synthSystemWriteFile(module, src, des) {
    let desDir = fspath.dirname(des);
    let content = fs.readFileSync(src, "utf-8");
    if (module.FS.findObject(`/${desDir}`) != null) {
        module.FS.writeFile(`/${des}`, content, { encoding: 'utf8' });
    } else {
        synthSystemMkdir(`/${desDir}`);
        module.FS.writeFile(`/${des}`, content, { encoding: 'utf8' });
    }
}

function synthSystemReadFile(module, path) {
    if (module.FS.findObject(`/${path}`) != null) {
        let content = module.FS.readFile(`/${path}`, { encoding: 'utf8' });
        return content;
    } else {
        console.log(`ERROR: The ${path} is not at this synth system.`);
    }
}

function synthRun(module, cmd) {
    module.ccall('run', '', ['string'], [cmd]);
}

function synthSimulate(vcd_path) {
    synth.ccall('run', '', ['string'], ["sim -vcd /simulation.vcd -clock sys_clk -reset sys_rst -zinit -n 10000"]);
    fs.writeFileSync(vcd_path, synthSystemReadFile("simulation.vcd"), "utf-8");
}

function synthXilinx(module, arg, edif_path, blif_path) {
    if (edif_path != undefined) {
        arg = arg + ` -edif /TOP.edif`;
    }
    if (blif_path != undefined) {
        arg = arg + ` -blif /TOP.blif`;
    }
    module.ccall('run', '', ['string'], [`synth_xilinx -nowidelut ${arg}`]);
    if (edif_path != undefined) {
        fs.writeFileSync(edif_path, synthSystemReadFile("/TOP.edif"), "utf-8");
    }
    if (blif_path != undefined) {
        fs.writeFileSync(edif_path, synthSystemReadFile("/TOP.blif"), "utf-8");
    }
}

function pickAllFile(file_path, extname, output_list) {
    let file_list = fs.readdirSync(file_path);
    for (let i = 0; i < file_list.length; i++) {
        const element = file_list[i];
        if (fs.statSync(`${file_path}/${element}`).isDirectory()) {
            pickAllFile(`${file_path}/${element}`, extname, output_list);
        } else {
            if (extname.includes(fspath.extname(element).toLowerCase())) {
                output_list.push(`${file_path}/${element}`.replace("//", "/").replace(/\\/g, "\/"));
            }
        }
    }
}

function synthLoadFile(module, path, parent) {
    let verilogFiles = [];
    pickAllFile(path, [".v", ".V", ".vh", ".vl"], verilogFiles);
    module.TTY.message = "";
    for (let index = 0; index < verilogFiles.length; index++) {
        const verilogFile = verilogFiles[index];
        const synthSysPath = verilogFile.replace(parent, "");
        synthSystemWriteFile(verilogFile, synthSysPath);
        module.ccall('run', '', ['string'], [`read_verilog /${synthSysPath}`]);
    }
    return module.TTY.message;
}

function synthSystemRemoveFile(module, path) {
    module.FS.unlink(`/${path}`);
}

function synthSystemRemoveDir(module, path) {
    let files = [];
    if (module.FS.findObject(`/${path}`) != null) {
        files = module.FS.readdir(`/${path}`);
        for (let index = 2; index < files.length; index++) {
            const element = files[index];
            let curPath = module.PATH.join(`/${path}`, element).replace(/\\/g, "\/");
            let value = module.FS.isDir(module.FS.stat(curPath).mode);
            if (value) {
                synthSystemRemoveDir(curPath);
            } else {
                module.FS.unlink(curPath);
            }
        }
        module.FS.rmdir(`/${path}`); //清除文件夹
    }
}

synth().then((Module) => {
    Module.ccall('run', '', ['string'], ["help"]);
    console.log(Module.TTY.message);
    let out = Module.ccall('prompt', 'string', [], []);
    console.log(out);
});