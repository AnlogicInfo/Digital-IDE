"use strict";

const fs = require("fs");
const vscode = require("vscode");

const dirs = require("./dirs");

function getOpeParam(opeParam) {
    opeParam.os = process.platform;
    opeParam.rootPath = `${__dirname}`.replace(/\\/g,"\/");
    var folder = vscode.workspace.workspaceFolders[0].uri.toString();
	folder = folder.substr(8, folder.length);
	folder += "/";
	var Drive = folder[0];
	folder = folder.substr(4, folder.length);
    opeParam.workspacePath = Drive + ":" + folder;
    opeParam.propertyPath = `${opeParam.workspacePath}.vscode/property.json`;
    if (!fs.existsSync(opeParam.propertyPath)) {
        if (!fs.existsSync(`${opeParam.workspacePath}property.json`)) {
            opeParam.propertyPath = "";
        }
        else{
            opeParam.propertyPath = `${opeParam.workspacePath}property.json`;
        }
    }
}

function generatePropertyPath(workspace_path) {
    let Property_path = `${workspace_path}.vscode/property.json`;
    if (!dirs.ensureExists(Property_path)) {
        if (!dirs.ensureExists(`${workspace_path}property.json`)) {
            vscode.window.showInformationMessage("There is no property.json here, where you want to generate?",'.vscode','root')
            .then(function(select){
                if (select == ".vscode") {
                    this.json.pushJsonInfo(`${workspace_path}.vscode/property.json`,prjInitparam);
                } else if (select == "root") {
                    this.json.pushJsonInfo(`${workspace_path}property.json`,prjInitparam);
                }
            });
        }else {
            vscode.window.showWarningMessage("property file already exists");
        }
    }
    else {
        vscode.window.showWarningMessage("property file already exists");
    }
}

function generatetbFile(path,root_path) {
    if (!fs.existsSync(path)) {
        let tb_template = fs.readFileSync(`${root_path}/.TOOL/.Data/testbench.v`, 'utf8');
        fs.writeFileSync(path, tb_template, 'utf8');
    }
}

function refreshPrjFolder(root_path,workspace_path,property_path) {
    let prj_info = this.json.pullJsonInfo(property_path);
    dirs.mkdir(`${workspace_path}prj/xilinx`);
    dirs.mkdir(`${workspace_path}prj/intel`);
    dirs.mkdir(`${workspace_path}prj/simulation`);
    if (prj_info.SOC_MODE.soc == "none") {
        dirs.deleteDir(`${workspace_path}user/Software`);
        dirs.movedir(`${workspace_path}user/Hardware/IP`  ,`${workspace_path}user`);
        dirs.movedir(`${workspace_path}user/Hardware/bd`  ,`${workspace_path}user`);
        dirs.movedir(`${workspace_path}user/Hardware/src` ,`${workspace_path}user`);
        dirs.movedir(`${workspace_path}user/Hardware/sim` ,`${workspace_path}user`);
        dirs.movedir(`${workspace_path}user/Hardware/data`,`${workspace_path}user`);
        dirs.deleteDir(`${workspace_path}user/Hardware`);
        generatetbFile(`${workspace_path}user/sim/testbench.v`,root_path);
    } else {
        dirs.mkdir(`${workspace_path}user/Software/data`);
        dirs.mkdir(`${workspace_path}user/Software/src`);
        dirs.mkdir(`${workspace_path}user/Hardware`);
        dirs.movedir(`${workspace_path}user/IP`  ,`${workspace_path}user/Hardware`);
        dirs.movedir(`${workspace_path}user/bd`  ,`${workspace_path}user/Hardware`);
        dirs.movedir(`${workspace_path}user/src` ,`${workspace_path}user/Hardware`);
        dirs.movedir(`${workspace_path}user/data`,`${workspace_path}user/Hardware`);
        dirs.movedir(`${workspace_path}user/sim` ,`${workspace_path}user/Hardware`);
        generatetbFile(`${workspace_path}user/Hardware/sim/testbench.v`,root_path);
    }
}

function refreshPrjInfo(root_path, Property_path) {
    if (dirs.ensureExists(Property_path)) {
        let prj_param = this.json.pullJsonInfo(Property_path);
        
        let CONFIG_contex = "FPGA_VERSION\n";
        CONFIG_contex += prj_param.FPGA_VERSION + '\n';
        CONFIG_contex += "PRJ_NAME.FPGA\n";
        CONFIG_contex += prj_param.PRJ_NAME.FPGA + '\n';
        CONFIG_contex += "PRJ_NAME.SOC\n";
        CONFIG_contex += prj_param.PRJ_NAME.SOC + '\n';
        CONFIG_contex += "SOC_MODE.soc\n";
        CONFIG_contex += prj_param.SOC_MODE.soc + '\n';
        CONFIG_contex += "SOC_MODE.bd_file\n";
        CONFIG_contex += prj_param.SOC_MODE.bd_file + '\n';
        CONFIG_contex += "SOC_MODE.os\n";
        CONFIG_contex += prj_param.SOC_MODE.os + '\n';
        CONFIG_contex += "SOC_MODE.app\n";
        CONFIG_contex += prj_param.SOC_MODE.app + '\n';
        CONFIG_contex += "enableShowlog\n";
        CONFIG_contex += prj_param.enableShowlog + '\n';
        CONFIG_contex += "Device\n";
    
        prj_param = this.json.pullJsonInfo(Property_path);
        CONFIG_contex += prj_param.Device + '\n';
        
        let xip_repo_path = vscode.workspace.getConfiguration().get('PRJ.xilinx.IP.repo.path');
        CONFIG_contex += "xip_repo_path\n";
        CONFIG_contex += xip_repo_path + '\n';
    
        this.file.writeFile(`${root_path}/.TOOL/CONFIG`,CONFIG_contex);
    } else {
        vscode.window.showWarningMessage('There is no property.json here!');
    }
}

function getFpgaVersion(Property_path) {
    let prj_param = this.json.pullJsonInfo(Property_path);
    return prj_param.FPGA_VERSION;
}

function getSocMode(Property_path) {
    let prj_param = this.json.pullJsonInfo(Property_path);
    if(prj_param.SOC_MODE.soc == "none"){
        return false;
    } else {
        return true;
    }
}

