"use strict";

const fs     = require("fs");
const fspath = require("path");
const vscode = require("vscode");

function deleteFile(path) {
    if (fs.existsSync(path)) {
        fs.unlinkSync(path);
    }
}
exports.deleteFile = deleteFile;

function pickFile(file_path,extname) {
    let file_list = fs.readdirSync(file_path);
    let output_list = [];
    file_list.filter(function (file) {
        if(fspath.extname(file).toLowerCase() === extname){
            output_list.push(file)
        }
    });
    return output_list;
}
exports.pickFile = pickFile;

function pickAllFile(file_path,extname,output_list) {
    let file_list = fs.readdirSync(file_path);
    for (let i = 0; i < file_list.length; i++) {
        const element = file_list[i];
        if (fs.statSync(`${file_path}/${element}`).isDirectory()) {
            pickAllFile(`${file_path}/${element}`,extname,output_list);
        } else {		
            if(fspath.extname(element).toLowerCase() === extname){
                output_list.push(vscode.Uri.file(`${file_path}/${element}`.replace("//","/").replace(/\\/g,"\/")));
            }
        }
    }
}
exports.pickAllFile = pickAllFile;

function pullJsonInfo(JSON_path) {
    var data = fs.readFileSync(JSON_path, 'utf8');
    let prjinfo = JSON.parse(data);
    return prjinfo;
}
exports.pullJsonInfo = pullJsonInfo;

function pushJsonInfo(JSON_path,JSON_data){
    var str = JSON.stringify(JSON_data,null,'\t');
    if (!fs.existsSync(fspath.dirname(JSON_path))) {
        fs.mkdirSync(fspath.dirname(JSON_path));
    }
    fs.writeFileSync(JSON_path, str, 'utf8');
}
exports.pushJsonInfo = pushJsonInfo;