"use strict";

const fs     = require("fs");
const fspath = require("path");

const prjs   = require("../operation/prjs");
const watch  = require("./watch");


function getLanguageId(path) {
    let vlogExtensions = [".vhd",".vhdl",".vho",".vht"];
    let vhdlExtensions = [".v",".V",".vh",".vl",".sv",".SV"];
    for (let i = 0; i < vlogExtensions.length; i++) {
        const element = vlogExtensions[i];
        if (fspath.extname(path).toLowerCase() === element) {
            return "vlog";
        }
    }
    for (let i = 0; i < vhdlExtensions.length; i++) {
        const element = vlogExtensions[i];
        if (fspath.extname(path).toLowerCase() === element) {
            return "vhdl";
        }
    }
    return null;
}

function propertyPrecess(filepath, opeParam) {
    if (filepath.indexOf("property.json") != -1) {
        prjs.getOpeParam(opeParam.rootPath, opeParam);
        prjs.refreshPrjFolder(opeParam);
        prjs.refreshPrjInfo(opeParam);
    }
}

function HDLFilePrecess(indexer, opeParam, callback) {
    let HDLFileList = []
    if (prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList) > 0) {
        indexer.HDLparam = []
        indexer.build_index(HDLFileList).then(() => {
            console.log(indexer.HDLparam);
            callback();
        });
    }
}

function momitor (path, opeParam, indexer, callback) {
    watch.createMonitor(path, { interval: 2 }, function (monitor) {
        monitor.on("created",  function (f) {
            propertyPrecess(f, opeParam);
            HDLFilePrecess(indexer, opeParam, callback);
        });
        monitor.on("changed", function (f, curr, prev) {
            propertyPrecess(f, opeParam);
            HDLFilePrecess(indexer, opeParam, callback);
        });
        monitor.on("removed", function (f, stat) {
            HDLFilePrecess(indexer, opeParam, callback);
        });
    });
}
exports.momitor = momitor;