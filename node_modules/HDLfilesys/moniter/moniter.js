"use strict";

const fs     = require("fs");
const fspath = require("path");
const vscode = require("vscode");
const watch  = require("./watch");
const prjs   = require("../operation/prjs");
const files  = require("../operation/files");

let fsWait = false;

function propertyPrecess(filepath, opeParam) {
    let HDLFileList = [];
    if (filepath.indexOf("property.json") != -1) {
        prjs.getOpeParam(opeParam.rootPath, opeParam);
        prjs.prjParam = prjs.refreshPrjInfo(opeParam);
        prjs.refreshPrjFolder(opeParam);
        // TODO: 检测相关内容是否更改
        if (files.isHasAttr(prjs.prjParam,"HardwareLIB.Common")) {            
            for (let i = 0; i < prjs.prjParam.HardwareLIB.Common.length; i++) {
                const element = prjs.prjParam.HardwareLIB.Common[i];
                prjs.refreshPrjFiles(`${opeParam.rootPath}/../lib/src_lib/Hardware/${element}`,HDLFileList);
            }
        }
        if (files.isHasAttr(prjs.prjParam,"HardwareLIB.Customer")) {            
            let customerLibPath = vscode.workspace.getConfiguration().get("PRJ.customer.Lib.repo.path");
            if (fs.existsSync(customerLibPath)) {            
                for (let i = 0; i < prjs.prjParam.Customer.length; i++) {
                    const element = prjs.prjParam.Customer[i];
                    prjs.refreshPrjFiles(`${customerLibPath}/${element}`,HDLFileList);
                }
            }
        }
        let array = [];
        for(var i = 0, l = HDLFileList.length; i < l; i++) {
            for(var j = i + 1; j < l; j++)
            if (HDLFileList[i].path === HDLFileList[j].path) j = ++i;
            array.push(HDLFileList[i]);
        }
        HDLFileList = array;
        if (files.isHasValue(prjs.prjParam,"HardwareLIB.State","real")) {
            for (let i = 0; i < HDLFileList.length; i++) {
                const element = HDLFileList[i];
                let src  = element.path.replace(`/${opeParam.rootPath}`,`${opeParam.rootPath}`);
                let dist = src.replace(`${opeParam.rootPath}/../lib/src_lib/Hardware/`,"");
                dist = dist.replace(`/${fspath.basename(src)}`,"");
                if (prjs.prjParam.SOC_MODE.soc != "none") {
                    dist = opeParam.workspacePath + "user/Hardware/src/lib/" + dist;
                } else {
                    dist = opeParam.workspacePath + "user/src/lib/" + dist;
                }
                files.copyFile(src,dist);
            }
        } else if (files.isHasValue(prjs.prjParam,"HardwareLIB.State","virtual")) {
            
        }
    }
}

function HDLFilePrecess(filepath, indexer, opeParam, callback) {
    let HDLFileList = [];
    if (prjs.refreshPrjFiles(filepath, HDLFileList) > 0) {
        HDLFileList = [];
        prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
        indexer.HDLparam = []
        indexer.build_index(HDLFileList).then(() => {
            callback();
        });
    }
}

function momitor (path, opeParam, indexer, callback) {
    watch.createMonitor(path, { interval: 1 }, function (monitor) {
        monitor.on("created",  function (f, stat) {
            // console.log(f + " created");
            propertyPrecess(f, opeParam);
            HDLFilePrecess(f, indexer, opeParam, callback);
        });
        monitor.on("changed", function (f, curr, prev) {
            propertyPrecess(f, opeParam);
            HDLFilePrecess(f, indexer, opeParam, callback);
        });
        monitor.on("removed", function (f, stat) {
            let HDLFileList = [];
            prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
            indexer.HDLparam = []
            indexer.build_index(HDLFileList).then(() => {
                callback();
            });
        });
    });
}
exports.momitor = momitor;