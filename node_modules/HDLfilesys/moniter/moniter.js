"use strict";

const fs     = require("fs");
const fspath = require("path");

const prjs   = require("../operation/prjs");
const watch  = require("./watch");

function propertyPrecess(filepath, opeParam) {
    if (filepath.indexOf("property.json") != -1) {
        prjs.getOpeParam(opeParam.rootPath, opeParam);
        prjs.refreshPrjFolder(opeParam);
        prjs.refreshPrjInfo(opeParam);
    }
}

function HDLFilePrecess(filepath, indexer, opeParam, callback) {
    let HDLFileList = [];
    if (prjs.refreshPrjFiles(filepath, HDLFileList) > 0) {
        HDLFileList = [];
        prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
        indexer.HDLparam = []
        indexer.build_index(HDLFileList).then(() => {
            callback();
        });
    }
}

function momitor (path, opeParam, indexer, callback) {
    watch.createMonitor(path, { interval: 1 }, function (monitor) {
        monitor.on("created",  function (f, stat) {
            // console.log(f + " created");
            propertyPrecess(f, opeParam);
            HDLFilePrecess(f, indexer, opeParam, callback);
        });
        monitor.on("changed", function (f, curr, prev) {
            propertyPrecess(f, opeParam);
            // console.log(f + " changed");
            HDLFilePrecess(f, indexer, opeParam, callback);
        });
        monitor.on("removed", function (f, stat) {
            console.log(f + " removed");
            HDLFilePrecess(f, indexer, opeParam, callback);
        });
    });
}
exports.momitor = momitor;