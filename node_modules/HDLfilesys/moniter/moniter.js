"use strict";

const fs     = require("fs");
const fspath = require("path");
const vscode = require("vscode");
const watch  = require("./watch");
const dir    = require("../operation/dirs")
const prjs   = require("../operation/prjs");
const files  = require("../operation/files");

let fsWait = false;

function momitor (path, opeParam, indexer, callback) {
    watch.createMonitor(path, { interval: 1 }, function (monitor) {
        monitor.on("created",  function (f) {
            // TODO 测试延时触发的效果
            // onCreate(f, indexer, opeParam, callback);
            onDelete(opeParam, indexer, callback);
        });
        monitor.on("changed", function (f) {
            // const md5Current = md5(fs.readFileSync(f));
            // if (md5Current === md5Previous) {
            //     return;
            // }
            // md5Previous = md5Current;
            onChange(f, opeParam, indexer, callback)
        });
        monitor.on("removed", () => {
            onDelete(opeParam, indexer, callback);
        });
    });
}
exports.momitor = momitor;

function onCreate(filepath, opeParam, indexer, callback) {
    if (fsWait) return;
    fsWait = setTimeout(() => {
        fsWait = false;
        console.log("create");
        HDLFilePrecess(filepath, indexer, opeParam, callback);
    }, 1000);
    fsWait = true;
}

function onChange(filepath, opeParam, indexer, callback) {
    if (filepath.indexOf("property.json") != -1) {
        propertyPrecess(indexer, opeParam, callback);
    } else {
        HDLFilePrecess(filepath, indexer, opeParam, callback);
    }
}

function onDelete(opeParam, indexer, callback) {
    if (fsWait) return;
    fsWait = setTimeout(() => {
        fsWait = false;
        console.log("remove");
        let HDLFileList = prjs.getLibParam(opeParam);
        prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
        indexer.HDLparam = []
        indexer.build_index(HDLFileList).then(() => {
            callback();
        });
    }, 1000);
    fsWait = true;
}

function HDLFilePrecess(filepath, indexer, opeParam, callback) {
    let HDLFileList = [];
    if (prjs.refreshPrjFiles(filepath, HDLFileList) > 0) {
        HDLFileList = prjs.getLibParam(opeParam);
        prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
        indexer.HDLparam = []
        indexer.build_index(HDLFileList).then(() => {
            callback();
        });
    }
}


function propertyPrecess(indexer, opeParam, callback) {
    prjs.refreshPrjFolder(opeParam);
    let HDLFileList = prjs.getLibParam(opeParam);
    prjs.refreshPrjFiles(opeParam.workspacePath, HDLFileList);
    indexer.HDLparam = []
    indexer.build_index(HDLFileList).then(() => {
        callback();
    });
}