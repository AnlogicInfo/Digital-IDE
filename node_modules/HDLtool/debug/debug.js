"use strict";

const vscode     = require("vscode");
const serialport = require('serialport');


class toolRegister {
    constructor (context) {
        this.context = context;
        this.setting = vscode.workspace.getConfiguration();
        vscode.workspace.onDidChangeConfiguration(function () {
            this.getConfig();
        });
        this.Register(this.context);
    }
    getConfig() {
        this.Parity    = this.setting.get('TOOL.SerialPortMonitor.Parity');
        this.BaudRate  = this.setting.get('TOOL.SerialPortMonitor.BaudRate');
        this.DataBits  = this.setting.get('TOOL.SerialPortMonitor.DataBits');
        this.StopBits  = this.setting.get('TOOL.SerialPortMonitor.StopBits');
    }
    serialPortTerminal(serialPortName,command) {
        var serialPort = new serialport.SerialPort(com_num, {
            parity:   this.Parity,    //校验位
            baudrate: this.BaudRate,  //波特率设置
            databits: this.DataBits,  //数据位
            stopbits: this.StopBits   //停止位
        });
        if (this.terminal.ensureTerminalExists(`${serialPortName}`)) {
            vscode.window.showWarningMessage('This serial port number is in use!');
        }
        else {
            let serialPort = vscode.window.createTerminal({ name: `${serialPortName}` });
            serialPort.show(true);
            serialPort.sendText(command);
        }
    }
    runSerialPort(command,) {
        exec(command,function (error, stdout, stderr) {
            let content = stdout.replace(/\s*/g,'');
            let SerialPortList = content.split("-");
            let porteries = `${BaudRate} ${DataBits} ${StopBits} ${Parity}`;
            if (SerialPortList[0] == "none") {
                vscode.window.showWarningMessage("Not found any serial port !");
            }
            if (SerialPortList[0] == "one") {
                porteries = SerialPortList[1] + " " + porteries;
                let command = `python ${opeParam.rootPath}/.TOOL/.Script/Serial_Port.py runthread ${porteries}`;
                serialPortTerminal(SerialPortList[1],command);
            }
            if (SerialPortList[0] == "multiple") {
                SerialPortList.splice(0,1);
                vscode.window.showQuickPick(SerialPortList).then(selection => {
                    if (!selection) {
                        return;
                    }
                    porteries = selection + " " + porteries;
                    let command = `python ${opeParam.rootPath}/.TOOL/.Script/Serial_Port.py runthread ${porteries}`;
                    serialPortTerminal(selection,command);
                });
            }
            if (error !== null) {
                vscode.window.showErrorMessage(error);
            }
        });
    }
    genBootLoadFile() {
        this.xilinxOpe.xbootgenerate(opeParam.workspacePath,opeParam.rootPath);
    }
    clean() {
        this.xilinxOpe.move_xbd_xIP(opeParam.workspacePath,opeParam.propertyPath);
        this.xilinxOpe.xclean(opeParam.workspacePath,"all");
    }
    serialPort() {
        let command = `python ${opeParam.rootPath}/.TOOL/.Script/Serial_Port.py getCurrentPort`;
        runSerialPort(command,opeParam.rootPath);
    }
    genProperty() {
        this.property.generatePropertypath(opeParam.workspacePath);
    }
    Register(context) {
        context.subscriptions.push(vscode.commands.registerCommand('TOOL.Gen_BOOT', () => {
            this.genBootLoadFile();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('TOOL.Clean', () => {
            this.clean();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('TOOL.Gen_Property', () => {
            this.genProperty();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('TOOL.SerialPort', () => {
            this.serialPort();
        }));
    }
}
exports.toolRegister = toolRegister;