"use strict";

const fs     = require("fs");
const vscode = require("vscode");
const child   = require("child_process");


class softwareRegister {
    constructor (opeParam) {
        this.StartSDK = null;
        this.opeParam = opeParam;
    }
    SDK_Launch() {
        if (this.getSocMode(this.opeParam)) {
			if (!ensureTerminalExists("StartSDK")) {
                this.StartSDK = vscode.window.createTerminal({ name: "StartSDK" });
			}
            this.StartSDK.show(true);
            this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/SDK/xsct_create_prj.tcl`);
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    SDK_Build() {
        if (this.getSocMode(this.opeParam)) {
			if (!ensureTerminalExists("StartSDK")) {
				this.StartSDK = vscode.window.createTerminal({ name: "StartSDK" });
			}
            this.StartSDK.show(true);
            this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/SDK/xsct_Build.tcl`);
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}	
    }
    SDK_Download() {
        if (this.getSocMode(this.opeParam)){
			if (!ensureTerminalExists("StartSDK")) {
                this.StartSDK = vscode.window.createTerminal({ name: "StartSDK" });
			}
            this.StartSDK.show(true);
            this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/SDK/xsct_Download.tcl`);
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    getSocMode(opeParam) {
        let data = fs.readFileSync(opeParam.propertyPath, 'utf8');
        let prjinfo = JSON.parse(data);
        if (prjinfo.SOC_MODE.soc == "none") {
            return false;
        } else {
            return true;
        }
    }
}
exports.softwareRegister = softwareRegister;

function ensureTerminalExists(name) {
    let Exists_flag = false
    vscode.window.terminals.forEach(element => {
        if (element.name == name) {
            Exists_flag = true
        }
    });
    return Exists_flag
}