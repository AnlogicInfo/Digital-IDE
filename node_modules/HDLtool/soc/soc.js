"use strict";

const vscode = require("vscode");

class softwareRegister {
    constructor () {
        this.SoftWare = null;

        this.warn = vscode.window.showWarningMessage;
    }

    isIllegal(opeParam) {
        let soc_mode = opeParam.prjinfo.SOC_MODE.soc;
        if (soc_mode) {
            return true;
        }
        
        if (soc_mode == "none") {
            return true;
        } else {
            return false;
        }
    }

    launch(opeParam) {
        if (this.isIllegal(opeParam)) {
            this.warn("Please confirm the mode of soc");
        }
        
        if (!ensureTerminalExists("SoftWare")) {
            this.SoftWare = vscode.window.createTerminal({ name: "SoftWare" });
        }

        let scriptPath = `${opeParam.rootPath}/resources/Script/xilinx/soft/launch.tcl`;
        this.SoftWare.show(true);
        this.SoftWare.sendText(`xsct ${scriptPath}`);
    }

    build(opeParam) {
        if (this.isIllegal(opeParam)) {
            this.warn("Please confirm the mode of soc");
        }
        
        if (!ensureTerminalExists("SoftWare")) {
            this.SoftWare = vscode.window.createTerminal({ name: "SoftWare" });
        }

        let scriptPath = `${opeParam.rootPath}/resources/Script/xilinx/soft/build.tcl`;
        this.SoftWare.show(true);
        this.SoftWare.sendText(`xsct ${scriptPath}`);
    }
    
    program(opeParam) {
        if (this.isIllegal(opeParam)) {
            this.warn("Please confirm the mode of soc");
        }

        if (!ensureTerminalExists("SoftWare")) {
            this.SoftWare = vscode.window.createTerminal({ name: "SoftWare" });
        }
        let scriptPath = `${opeParam.rootPath}/resources/Script/xilinx/soft/program.tcl`;
        this.SoftWare.show(true);
        this.SoftWare.sendText(`xsct ${scriptPath}`);
    }
}
exports.softwareRegister = softwareRegister;