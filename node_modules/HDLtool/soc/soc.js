const fs     = require("fs");
const vscode = require("vscode");
const child  = require("child_process");

const filesys = require("HDLfilesys");


class socRegister {
    constructor (context, opeParam) {
        this.context  = context;
        this.StartSDK = null;
        this.opeParam = opeParam;

        this.Register(this.context);
    }
    SDK_Launch() {
        if (this.property.getSocMode(this.opeParam.propertyPath)) {
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);		
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_create_prj.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_create_prj.tcl`);
			}
			this.xilinxOpe.xclean(this.opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    SDK_Build() {
        if (this.property.getSocMode(this.opeParam.propertyPath)) {
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);		
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_Build.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_Build.tcl`);
			}
			this.xilinxOpe.xclean(this.opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}	
    }
    SDK_Download() {
        if (this.property.getSocMode(this.opeParam.propertyPath)){
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_Download.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${this.opeParam.rootPath}/../resources/tool/Xilinx/Script/Xilinx_TCL/SDK/xsct_Download.tcl`);
			}
			this.xilinxOpe.xclean(this.opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    Register(context) {
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Launch', () => {
            this.SDK_Launch();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Build', () => {
            this.SDK_Build();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Download', () => {
            this.SDK_Download();
        }));
    }
}
exports.socRegister = socRegister;