const fs     = require("fs");
const vscode = require("vscode");
const child  = require("child_process");

const filesys = require("HDLfilesys");


class socRegister {
    constructor (context) {
        this.StartSDK = null;

        this.context = context;

        this.json      = new utils.jsonOperation();
        this.file      = new utils.fileOperation();
        this.array     = new utils.arrayOperation();
        this.folder    = new utils.folderOperation();
        this.property  = new utils.refreshProperty();
        this.terminal  = new utils.terminalOperation();
        this.xilinxOpe = new utils.xilinxFileExplorer();

        // this.rootPath      = opeParam.rootPath;
        // this.propertyPath  = opeParam.propertyPath;
        // this.workspacePath = opeParam.workspacePath;

        this.Register(this.context);
    }
    SDK_Init() {
        if (this.property.getSocMode(opeParam.propertyPath)) {
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);		
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_create_prj.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_create_prj.tcl`);
			}
			this.xilinxOpe.xclean(opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    SDK_Build() {
        if (this.property.getSocMode(opeParam.propertyPath)) {
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);		
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_Build.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_Build.tcl`);
			}
			this.xilinxOpe.xclean(opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}	
    }
    SDK_Download() {
        if (this.property.getSocMode(opeParam.propertyPath)){
			if (this.terminal.ensureTerminalExists("this.StartSDK")) {
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_Download.tcl`);
			}
			else {
				this.StartSDK = vscode.window.createTerminal({ name: 'this.StartSDK' });
				this.StartSDK.show(true);
				this.StartSDK.sendText(`xsct ${opeParam.rootPath}/.TOOL/Xilinx/Script/Xilinx_TCL/SDK/xsct_Download.tcl`);
			}
			this.xilinxOpe.xclean(opeParam.workspacePath,"none");
		} else {
			vscode.window.showWarningMessage("Please confirm the mode of soc");
		}
    }
    Register(context) {
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Init', () => {
            this.SDK_Init();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Build', () => {
            this.SDK_Build();
        }));
        context.subscriptions.push(vscode.commands.registerCommand('SDK.Download', () => {
            this.SDK_Download();
        }));
    }
}
exports.socRegister = socRegister;