"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;

const fs     = require("fs");
const fspath = require("path");
const vscode = require("vscode");
const parser = require("HDLparser");

class FileSystemProvider {
    constructor(HDLparam) {
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData  = this._onDidChangeTreeData.event;
        this.HDLparam = HDLparam;
    }
    // onChange(document) {
    //     if (!this.getHDLDocumentType(document)) {
    //         return;
    //     }
    //     else if (this.getHDLDocumentType(document) == 1 ) {
    //         this.HDLparam = this.parser.removeCurrentFileParam(document, this.HDLparam);
    //         this.parser.get_HDLfileparam(document, null, 0, null, this.HDLparam);
    //         this.parser.get_instModulePath(this.HDLparam);
    //         this.refresh();
    //     }
    // }
    refresh(element) {
        if (element) {
            this._onDidChangeTreeData.fire(element);
        }
        else {
            this._onDidChangeTreeData.fire();
        }
    }
    // 用于获取某个节点下属的节点数组，根节点记为 null；
    // 返回一个树节点的所有子节点的数据。
    /**
     * 1. 先创建根节点
     * 2. 再根据根节点创建子节点
     */
    getChildren(element) {
        // 如果不是根节点
        if (element) {
            switch (element.type) {
                case "src"       : return parser.simParser.getTopElement(this.HDLparam)//getSrcTopElement();
                // case "Data"      : return this.getDataTopElement();
                // case "testbench" : return this.getTbTopElement();
                default          : return parser.simParser.getChildElement(element.type, this.HDLparam);
            }
        }

        // 根节点
        return [
            { "type" : "src" },
            // { "type" : "Data" },
            // { "type" : "testbench" }
        ];
    }
    // 用于获取实际渲染的 TreeItem 实例。
    /* 
    TreeItem 有两种创建方式： 
        1. 第一种，就是提供 label，也就是一个字符串，VS Code 会把这个字符串渲染在树形结构中； 
        2. 第二种就是提供 resourceUri，也就是一个资源地址，
        VS Code 则会像资源管理器里渲染文件和文件夹一样渲染这个节点的。 
    iconPath         属性，是用于控制树节点前的图标的。 
                        如果说自己通过 TreeView API 来实现一个资源管理器的话，
                        就可以使用 iconPath 来为不同的文件类型指定不同的图标。
    tooltip          属性，当把鼠标移动到某个节点上等待片刻，VS Code 就会显示出这个节点对应的 tooltip 文字。
    collapsibleState 属性，是用于控制这个树节点是应该展开还是折叠。 
                        当然，如果这个节点没有子节点的话，这个属性就用不着了。
    command          属性，如果有这个属性的话，当点击这个树节点时，这个属性所指定的命令就会被执行了。
    */
    getTreeItem(element) {
        let childrenList = this.getChildren(element);
        let elementName = "";
        if (element.name == "" || element.name == undefined) {
            elementName = element.type;
        } else {
            elementName = element.name + ' \(' + element.type + '\)';
        }
        const treeItem = new vscode.TreeItem(
            elementName,
            childrenList.length === 0 ? 
            vscode.TreeItemCollapsibleState.None :
            vscode.TreeItemCollapsibleState.Collapsed 
        );
        let TreeItemList = [];
        for (let index = 0; index < childrenList.length; index++) {
            const element = childrenList[index];
            TreeItemList.push(this.getTreeItem(element));
        }
        treeItem.contextValue = 'file';
        treeItem.children = TreeItemList;
        treeItem.command = { 
            title:     "Open this HDL File", 
            command:   'FILE.openFile', 
            arguments: [element.fspath], 
        };
        return treeItem;
    }
}
exports.FileSystemProvider = FileSystemProvider;
class FileExplorer {
    constructor(HDLparam) {
        const treeDataProvider = new FileSystemProvider(HDLparam);
        this.fileExplorer = vscode.window.registerTreeDataProvider('TOOL.file_tree', treeDataProvider);
        vscode.commands.registerCommand("FILE.refresh", () => treeDataProvider.refresh());
        vscode.commands.registerCommand('FILE.openFile', (resource) => this.openResource(resource));
    }
    openResource(resource) {
        vscode.window.showTextDocument(vscode.Uri.file(resource));
    }
}
exports.FileExplorer = FileExplorer;

class fpgaTreeDataProvider {
    constructor(opeParam){
        this.opeParam = opeParam;
    }
    getChildren(element) {
        // 如果不是根节点
        if (element) {
            if (element.name === "Build") {
                return [
                    { "name" : "Synth"   },
                    { "name" : "Impl"    },
                    { "name" : "Gen_Bit" }
                ];
            } else {
                return [];
            }
        }
        // 根节点
        return [
            { "name" : "Launch"   },
            { "name" : "Simulate" },
            { "name" : "Build"    },
            { "name" : "Program"  },
            { "name" : "GUI"      },
            { "name" : "Exit"     }
        ];
    }
    getTreeItem(element) {
        let childrenList = this.getChildren(element);
        const treeItem = new vscode.TreeItem(
            element.name,
            childrenList.length === 0 ? 
            vscode.TreeItemCollapsibleState.None :
            vscode.TreeItemCollapsibleState.Collapsed 
        );
        let TreeItemList = [];
        for (let index = 0; index < childrenList.length; index++) {
            const element = childrenList[index];
            TreeItemList.push(this.getTreeItem(element));
        }
        treeItem.contextValue = 'FPGA';
        treeItem.children = TreeItemList;
        treeItem.command  = this.getCommand(element.name);
        treeItem.tooltip  = this.getToolTip(element.name);
        treeItem.iconPath = this.getIconPath(element.name);
        return treeItem;
    }
    getCommand(name){
        let cuurentCommand = { 
            title:     name, 
            command:   ""
        };
        switch (name) {
            case "Launch"   : cuurentCommand.command = "FPGA.Launch";   break;
            case "Simulate" : cuurentCommand.command = "FPGA.Simulate"; break;
            case "Build"    : cuurentCommand.command = "FPGA.Build";    break;
            case "Program"  : cuurentCommand.command = "FPGA.Program";  break;
            case "GUI"      : cuurentCommand.command = "FPGA.GUI";      break;
            case "Exit"     : cuurentCommand.command = "FPGA.Exit";     break;

            case "Synth"    : cuurentCommand.command = "FPGA.Synth";    break;
            case "Impl"     : cuurentCommand.command = "FPGA.Impl";     break;
            case "Gen_Bit"  : cuurentCommand.command = "FPGA.Gen_Bit";  break;
            
            default: break;
        }
        return cuurentCommand;
    }
    getIconPath(name){
        let iconPath = ""
        switch (name) {
            case "Launch"   : iconPath = "cmd"; break;
            case "Simulate" : iconPath = "cmd"; break;
            case "Build"    : iconPath = "cmd"; break;
            case "Program"  : iconPath = "cmd"; break;
            case "GUI"      : iconPath = "cmd"; break;
            case "Exit"     : iconPath = "cmd"; break;

            case "Synth"    : iconPath = "branch"; break;
            case "Impl"     : iconPath = "branch"; break;
            case "Gen_Bit"  : iconPath = "branch"; break;
            
            default: break;
        }
        let currentIconPath = {
            light : `${this.opeParam.rootPath}/../images/svg/light/` + iconPath + ".svg",
            dark  : `${this.opeParam.rootPath}/../images/svg/dark/`  + iconPath + ".svg"
        };
        return currentIconPath;
    }
    getToolTip(name){
        let currentToolTip = ""
        switch (name) {
            case "Launch"   : currentToolTip = "Launch FPGA development assist function"; break;
            case "Simulate" : currentToolTip = "Launch the manufacturer Simulation"; break;
            case "Build"    : currentToolTip = "Build the current fpga project"; break;
            case "Program"  : currentToolTip = "Download the bit file into the device"; break;
            case "GUI"      : currentToolTip = "Open the GUI"; break;
            case "Exit"     : currentToolTip = "Exit the current project"; break;

            case "Synth"    : currentToolTip = "Synth the current project"; break;
            case "Impl"     : currentToolTip = "Impl  the current project"; break;
            case "Gen_Bit"  : currentToolTip = "Generate the BIT File"; break;
            
            default: break;
        }
        return currentToolTip;
    }
}
exports.fpgaTreeDataProvider = fpgaTreeDataProvider;

class sdkTreeDataProvider {
    constructor(opeParam){
        this.opeParam = opeParam;
    }
    getChildren(element) {
        // 根节点
        return [
            { "name" : "Launch"   },
            { "name" : "Build"    },
            { "name" : "Download" }
        ];
    }
    getTreeItem(element) {
        let treeItem = new vscode.TreeItem(
            element.name,
            vscode.TreeItemCollapsibleState.None
        );
        treeItem.contextValue = 'SDK';
        treeItem.command  = this.getCommand(element.name);
        treeItem.tooltip  = this.getToolTip(element.name);
        treeItem.iconPath = this.getIconPath(element.name);
        return treeItem;
    }
    getCommand(name){
        let cuurentCommand = { 
            title:     name, 
            command:   ""
        };
        switch (name) {
            case "Launch"   : cuurentCommand.command = "SDK.Launch";   break;
            case "Build"    : cuurentCommand.command = "SDK.Build";    break;
            case "Download" : cuurentCommand.command = "SDK.Download"; break;
            
            default: break;
        }
        return cuurentCommand;
    }
    getIconPath(name){
        let iconPath = ""
        switch (name) {
            case "Launch"   : iconPath = "cmd"; break;
            case "Build"    : iconPath = "cmd"; break;
            case "Download" : iconPath = "cmd"; break;
            
            default: break;
        }
        let currentIconPath = {
            light : `${this.opeParam.rootPath}/../images/svg/light/` + iconPath + ".svg",
            dark  : `${this.opeParam.rootPath}/../images/svg/dark/`  + iconPath + ".svg"
        };
        return currentIconPath;
    }
    getToolTip(name){
        let currentToolTip = ""
        switch (name) {
            case "Launch"   : currentToolTip = "Launch SDK development assist function"; break;
            case "Build"    : currentToolTip = "Build the current SDK project"; break;
            case "Download" : currentToolTip = "Download the boot file into the device"; break;

            default: break;
        }
        return currentToolTip;
    }
}
exports.sdkTreeDataProvider = sdkTreeDataProvider;

class toolTreeDataProvider {
    constructor(opeParam){
        this.opeParam = opeParam;
    }
    getChildren(element) {
        // 根节点
        return [
            { "name" : "BOOT"   },
            { "name" : "Clean"    },
            { "name" : "SerialPort" }
        ];
    }
    getTreeItem(element) {
        let treeItem = new vscode.TreeItem(
            element.name,
            vscode.TreeItemCollapsibleState.None
        );
        treeItem.contextValue = 'TOOL';
        treeItem.command  = this.getCommand(element.name);
        treeItem.tooltip  = this.getToolTip(element.name);
        treeItem.iconPath = this.getIconPath(element.name);
        return treeItem;
    }
    getCommand(name){
        let cuurentCommand = { 
            title:     name, 
            command:   ""
        };
        switch (name) {
            case "BOOT"       : cuurentCommand.command = "TOOL.Gen_BOOT";   break;
            case "Clean"      : cuurentCommand.command = "TOOL.Clean";    break;
            case "SerialPort" : cuurentCommand.command = "TOOL.SerialPort"; break;
            
            default: break;
        }
        return cuurentCommand;
    }
    getIconPath(name){
        let iconPath = ""
        switch (name) {
            case "BOOT"       : iconPath = "BOOT"; break;
            case "Clean"      : iconPath = "clean"; break;
            case "SerialPort" : iconPath = "SerialPort"; break;
            
            default: break;
        }
        let currentIconPath = {
            light : `${this.opeParam.rootPath}/../images/svg/light/` + iconPath + ".svg",
            dark  : `${this.opeParam.rootPath}/../images/svg/dark/`  + iconPath + ".svg"
        };
        return currentIconPath;
    }
    getToolTip(name){
        let currentToolTip = ""
        switch (name) {
            case "BOOT"       : currentToolTip = "Launch SDK development assist function"; break;
            case "Clean"      : currentToolTip = "Clean the current project"; break;
            case "SerialPort" : currentToolTip = "Launch Serial monitor"; break;

            default: break;
        }
        return currentToolTip;
    }
}
exports.toolTreeDataProvider = toolTreeDataProvider;
