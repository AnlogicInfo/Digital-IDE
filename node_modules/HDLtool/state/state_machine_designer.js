"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const path_lib = require("path");
const fs = require("fs");

class State_machine_designer_manager {
    constructor(context) {
        this.panel = undefined;
        this.sources = [];
        this.context = context;
    }
    open_viewer() {
        return __awaiter(this, void 0, void 0, function* () {
            this.create_viewer();
        });
    }
    create_viewer() {
        return __awaiter(this, void 0, void 0, function* () {
            // Create panel
            this.panel = vscode.window.createWebviewPanel('state_machine_viewer', 'State machine designer', vscode.ViewColumn.One, {
                enableScripts: true,
                enableCommandUris: true,
            });
            this.panel.onDidDispose(() => {
                // When the panel is closed, cancel any future updates to the webview content
                this.panel = undefined;
            }, null, this.context.subscriptions);
            // Handle messages from the webview
            this.panel.webview.onDidReceiveMessage(message => {
                switch (message.command) {
                    case 'export':
                        this.show_export_message();
                        return;
                }
            }, undefined, this.context.subscriptions);
            let previewHtml = this.getWebviewContent(this.context);
            this.panel.webview.html = previewHtml;
        });
    }
    show_export_message() {
        vscode.window.showInformationMessage('Code copied to clipboard üñ•Ô∏è');
    }
    getWebviewContent(context) {
        let template_path = 'resources' + path_lib.sep + 'state_machine_designer' + path_lib.sep + 'state_machine_designer.html';
        const resource_path = path_lib.join(context.extensionPath, template_path);
        const dir_path = path_lib.dirname(resource_path);
        let html = fs.readFileSync(resource_path, 'utf-8');
        html = html.replace(/(<link.+?href="|<script.+?src="|<img.+?src=")(.+?)"/g, (m, $1, $2) => {
            return $1 + vscode.Uri.file(path_lib.resolve(dir_path, $2)).with({ scheme: 'vscode-resource' }).toString() + '"';
        });
        return html;
    }
}
exports.default = State_machine_designer_manager;