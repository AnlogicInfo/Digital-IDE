"use strict";

const fs       = require("fs");
const fspath   = require("path");
const vscode   = require("vscode");
const parser   = require("HDLparser");
const filesys  = require("HDLfilesys");
const instance = require("./Instance");

function Overwrite_tb(opeParam) {
    let tbSourcePath = "";
    vscode.window.showQuickPick(['vlog','vhdl'],{placeHolder:"Which type you want to Overwrite?"}).then(select => {
        if (select == "vlog") {
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.v`;
        } else if (select == "vhdl") {
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.vhd`;
        }
        const options = {
            preview: false,
            viewColumn: vscode.ViewColumn.Active
        };
        vscode.window.showTextDocument(vscode.Uri.file(tbSourcePath), options);
    });
}
exports.Overwrite_tb = Overwrite_tb;

function generatetbFile(opeParam) {
    let tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/`;
    if (filesys.files.isHasAttr(opeParam.prjInfo, "tbFilePath")) {
        vscode.window.showWarningMessage("The testbench file has been specified.");
        return null;
    }
    vscode.window.showQuickPick(['vlog','vhdl'],{placeHolder:"Which type you want to generate?"}).then(select => {
        // "Which type you want to generate?"
        if (!fs.statSync(opeParam.tbFilePath).isDirectory()) {
            let extname = fspath.extname(opeParam.tbFilePath).toLowerCase();
            if (select == "vlog") {
                if (extname == ".v") {
                    vscode.window.showWarningMessage("testbench file already exists !!!");
                    return null;
                } else {
                    opeParam.tbFilePath = fspath.dirname(opeParam.tbFilePath) + "/testbench.v";
                    tbSourcePath = tbSourcePath + "testbench.v";
                }
            }
            if (select == "vhdl") {
                if (extname == ".vhd") {
                    vscode.window.showWarningMessage("testbench file already exists !!!");
                    return null;
                } else {
                    opeParam.tbFilePath = fspath.dirname(opeParam.tbFilePath) + "/testbench.vhd";
                    tbSourcePath = tbSourcePath + "testbench.vhd";
                }
            }
            let tb_template = fs.readFileSync(tbSourcePath, 'utf8');
            filesys.dirs.mkdir(fspath.dirname(opeParam.tbFilePath));
            if (fs.existsSync(opeParam.tbFilePath)) {
                vscode.window.showWarningMessage("testbench file already exists !!!");
            } else {
                fs.writeFileSync(opeParam.tbFilePath, tb_template, 'utf8');
            }
        } else {
            if (select == "vlog") {
                opeParam.tbFilePath   = opeParam.tbFilePath + "/testbench.v";
                tbSourcePath = tbSourcePath + "testbench.v";
            } else if (select == "vhdl") {
                opeParam.tbFilePath   = opeParam.tbFilePath + "/testbench.vhd";
                tbSourcePath = tbSourcePath + "testbench.vhd";
            }
            let tb_template = fs.readFileSync(tbSourcePath, 'utf8');
            filesys.dirs.mkdir(fspath.dirname(opeParam.tbFilePath));
            if (fs.existsSync(opeParam.tbFilePath)) {
                vscode.window.showWarningMessage("testbench file already exists !!!");
                return null;
            } else {
                fs.writeFileSync(opeParam.tbFilePath, tb_template, 'utf8');
            }
        }
    });
}
exports.generatetbFile = generatetbFile;

function genInstancetoTbFile(indexer, tbFilePath) {
    if (!fs.existsSync(tbFilePath) || fs.statSync(tbFilePath).isDirectory()) {
        vscode.window.showErrorMessage(`${tbFilePath} does not exist !!!`);
        return;
    }
    var doc = vscode.window.activeTextEditor.document;
    parser.utils.selectCurrentFileModule(indexer.HDLparam, doc).then(selectModule => {
        if (selectModule != null) {
            if (doc.languageId == "systemverilog" || doc.languageId == "verilog") {
                let inst = instance.instantiateVlogModule(selectModule);
                appiontInsert(findInstLocale(tbFilePath), inst);
            } else if (doc.languageId == "vhdl") {
                let inst = instance.instantiateVhdlModule(selectModule);
                appiontInsert(findInstLocale(tbFilePath), inst);
            }
        }
    })
}
exports.genInstancetoTbFile = genInstancetoTbFile;

function appiontInsert(position, content) {
    const editor = vscode.window.activeTextEditor;
    if (editor === undefined) {
        return;
    }

    editor.edit((editBuilder) => {
        editBuilder.insert(position, content);
    });
}
exports.appiontInsert = appiontInsert;

function findInstLocale(tbFilePath) {
    let InstLocale = 0;
    let content = fs.readFileSync(tbFilePath, "utf-8");
    let lines = content.split('\n');
    for (let index = 0; index < lines.length; index++) {
        const line = lines[index];
        if (line.indexOf("//Instance ") == -1) {
            InstLocale++;
        } else {
            break;
        }
    }
    return new vscode.Position(InstLocale, 0);
}