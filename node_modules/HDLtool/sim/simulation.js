"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });

const fs      = require("fs");
const child   = require("child_process");
const fspath  = require("path");
const vscode  = require("vscode");
const parser  = require("HDLparser");
const filesys = require("HDLfilesys");

let gtkwaveInstallPath = vscode.workspace.getConfiguration().get('TOOL.gtkwave.install.path');

function Overwrite_tb(opeParam) {
    let tbSourcePath = "";
    vscode.window.showInformationMessage("Which type you want to Overwrite?",'vlog','vhdl').then(function(select){
        if (select == "vlog") {
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.v`;
        } else if (select == "vhdl") {
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.vhd`;
        }
    });
    const options = {
        preview: false,
        viewColumn: vscode.ViewColumn.Active
    };
    vscode.window.showTextDocument(vscode.Uri.file(tbSourcePath), options);
}
exports.Overwrite_tb = Overwrite_tb;

function generatetbFile(opeParam) {
    let tbFilePath = "";
    let tbSourcePath = "";
    vscode.window.showInformationMessage("Which type you want to generate?",'vlog','vhdl').then(function(select){
        if (select == "vlog") {
            tbFilePath   = `${opeParam.currentSrcPath}/sim/testbench.v`;
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.v`;
        } else if (select == "vhdl") {
            tbFilePath   = `${opeParam.currentSrcPath}/sim/testbench.vhd`;
            tbSourcePath = `${opeParam.rootPath}/../lib/src_lib/Hardware/testbench.vhd`;
        }
        if (!fs.existsSync(tbFilePath)) {
            let tb_template = fs.readFileSync(tbSourcePath, 'utf8');
            filesys.dirs.mkdir(fspath.dirname(tbSourcePath));
            fs.writeFileSync(tbFilePath, tb_template, 'utf8');
        } else {
            vscode.window.showWarningMessage("testbench file already exists !!!");
        }
    });
}
exports.generatetbFile = generatetbFile;

class iverilogSimulate {
    constructor(opeParam) {
        this.opeParam = opeParam;
        this.simLibRootPath = "";
        this.LibPath  = "";
        this.GlblPath = "";
        this.setting  = vscode.workspace.getConfiguration();
        this.getConfig();
        vscode.workspace.onDidChangeConfiguration(function () {
            this.getConfig();
        });
    }
    getConfig() {
        this.installPath    = this.setting.get('TOOL.iVerilog.install.path');
        this.runFilePath    = this.setting.get('HDL.linting.runFilePath');
        this.iverilogArgs   = this.setting.get('HDL.linting.iverilog.arguments');
    }
    simulate(indexer) {
        this.getConfig();
        let editor = vscode.window.activeTextEditor;
        if (!editor) {
            return;
        }
        // 获取运行时的路径
        if (this.runFilePath == "") {
            this.runFilePath = `${this.opeParam.workspacePath}prj/simulation/iVerilog`
            filesys.dirs.mkdir(this.runFilePath);
        }

        // 获取运行工具的路径
        let vvpPath      = "vvp";
        let gtkwavePath  = "gtkwave";
        let iVerilogPath = "iverilog";
        if (this.installPath != "") {
            vvpPath = this.installPath + "vvp.exe";
            iVerilogPath = this.installPath + "iverilog.exe";
        }
        if (gtkwaveInstallPath != "") {
            gtkwavePath = gtkwaveInstallPath + "gtkwave.exe";
        }

        // 获取对应厂商的仿真库路径
        if (this.opeParam.propertyPath != '') {
            let prjInfo = filesys.files.pullJsonInfo(this.opeParam.propertyPath);
            if (prjInfo.FPGA_VERSION == "xilinx") {					
                this.xilinxLibPath();
            }
        }

        // 获取当前文件的模块名和模块数 选择要仿真的模块
        let moduleNameList = [];
        for (let i = 0; i < indexer.HDLparam.length; i++) {
            const element = indexer.HDLparam[i];
            if (element.modulePath == editor.document.fileName.replace(/\\/g,"\/").replace("//","/")) {
                moduleNameList.push(element.moduleName);
            }
        }
        if (moduleNameList.length >= 1) {
            let rtlFilePath  = "";
            // let iverilogPath = "";
            // iverilogPath = editor.document.fileName.replace(/\\/g,"\/").replace("//","/");                    

            // 获取所有例化模块所在文件的路径
            let instmoduleFilePathList = [];
            indexer.HDLparam.forEach(unitModule => {     
                if (unitModule.moduleName == moduleNameList[0]) {
                    unitModule.instmodule.forEach(instanceModule => {
                        instmoduleFilePathList.push(instanceModule.instModPath);
                    });
                }          
            });
            instmoduleFilePathList = this.removeDuplicates(instmoduleFilePathList);
            instmoduleFilePathList.forEach(element => {
                rtlFilePath = rtlFilePath + element + " ";
            });
            
            let command = `${iVerilogPath} -g2012 -o ${this.runFilePath}/out.vvp ` + 
            `${editor.document.fileName} `.replace(/\\/g,"\/").replace("//","/") + 
            `${rtlFilePath} `.replace(/\\/g,"\/").replace("//","/") + 
            `${this.GlblPath} ` + 
            `${this.LibPath}`;

            let waveImagePath = parser.simParser.getWaveImagePath(editor.document.getText());
            child.exec(command, { cwd: this.runFilePath }, function (error, stdout, stderr) {
                vscode.window.showInformationMessage(stdout);
                if (error !== null) {
                    vscode.window.showErrorMessage(stderr);
                } else {
                    vscode.window.showInformationMessage("iVerilog simulates successfully!!!");
                    if (waveImagePath != '') {
                        let waveImageExtname = waveImagePath.split('.');
                        let Simulate = vscode.window.createTerminal({ name: 'Simulate' });
                        Simulate.show(true);
                        Simulate.sendText(`${vvpPath} ${this.runFilePath}/out.vvp -${waveImageExtname[waveImageExtname.length-1]}`);
                        let gtkwave = vscode.window.createTerminal({ name: 'gtkwave' });
                        gtkwave.show(true);
                        gtkwave.sendText(`${gtkwavePath} ${waveImagePath}`);
                    } else {
                        vscode.window.showWarningMessage("There is no wave image path in this testbench");
                    }
                }
            });
        }         
        else {
            vscode.window.showWarningMessage("There is no module in this file")
        }
    }
    xilinxLibPath() {
        this.simLibRootPath = this.setting.get('TOOL.xilinx.install.path');
        if (this.simLibRootPath != "") {
            let xilinxVersion = '2019.2';
            let version = fs.readdirSync(`${this.simLibRootPath}/Vivado`, "utf-8");
            if (version.length == 1) {
                xilinxVersion = version[0];
            }                
            this.simLibRootPath = `${this.simLibRootPath}/Vivado/` + xilinxVersion + "/data/verilog/src";
            this.GlblPath = this.simLibRootPath + "/glbl.v ";
            this.LibPath  = "-y " + this.simLibRootPath + "/xeclib ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unisims ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unimacro ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unifast ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/retarget ";
        } else {
            vscode.window.showInformationMessage("TOOL.xilinx.install.path is empty");
        }
    }
    removeDuplicates(arry) {
        let r = [];
        for(var i = 0, l = arry.length; i < l; i++) {
            for(var j = i + 1; j < l; j++)
            if (arry[i] === arry[j]) j = ++i;
            r.push(arry[i]);
        }
        return r;
    }
}
exports.iverilogSimulate = iverilogSimulate;
