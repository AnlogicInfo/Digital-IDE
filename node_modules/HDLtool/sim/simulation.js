"use strict";

const fs      = require("fs");
const fspath  = require("path");
const child   = require("child_process");
const vscode  = require("vscode");
const parser  = require("HDLparser");
const filesys = require("HDLfilesys");

class iverilogSimulate {
    
    constructor(opeParam) {
        this.opeParam = opeParam;
        this.simLibRootPath = "";
        this.LibPath  = "";
        this.GlblPath = "";
        this.setting  = vscode.workspace.getConfiguration();
        this.getConfig();
        vscode.workspace.onDidChangeConfiguration(function () {
            this.getConfig();
        });
    }

    getConfig() {
        this.installPath = this.setting.get('TOOL.iverilog.install.path');
        this.runFilePath = this.setting.get('HDL.linting.runFilePath');
    }

    simulate(uri, HDLparam) {
        this.getConfig();

        let docPath = uri.fsPath.replace(/\\/g,"\/").replace("//","/");
        if (filesys.files.isHasAttr(uri, "type")) {
            if (uri.type != null) {
                this.execSimulation(
                    docPath, 
                    {name:uri.type,path:docPath}, 
                    HDLparam
                );
            } else {
                vscode.window.showErrorMessage("ERROR: uri.type is null");
            }
        } else {
            // 获取当前文件的模块名和模块数 选择要仿真的模块
            parser.utils.selectCurrentFileModule(HDLparam, docPath).then((selectModule) => {
                if (selectModule != null) {
                    this.execSimulation(
                        docPath, 
                        {name:selectModule.moduleName,path:selectModule.modulePath}, 
                        HDLparam
                    );
                }
            });      
        }
    }

    execSimulation(docPath, module, HDLparam) {
        let rtlFilePath  = "";    
        // 获取运行时的路径
        if (this.runFilePath == "") {
            this.runFilePath = `${this.opeParam.workspacePath}/prj/simulation/iVerilog`
            filesys.dirs.mkdir(this.runFilePath);
        }

        // 获取运行工具的路径
        let vvpPath      = "vvp";
        let gtkwavePath  = "gtkwave";
        let iVerilogPath = "iverilog";
        if (this.installPath != "") {
            if (this.opeParam.os == "win32") {
                vvpPath = this.installPath + "vvp.exe";
                iVerilogPath = this.installPath + "iverilog.exe";
            } else if (this.opeParam.os == "linux") {
                vvpPath = this.installPath + "vvp";
                iVerilogPath = this.installPath + "iverilog";
            }
        }
        let gtkwaveInstallPath = vscode.workspace.getConfiguration().get('TOOL.gtkwave.install.path');
        if (gtkwaveInstallPath != "") {
            if (this.opeParam.os == "win32") {
                gtkwavePath = gtkwaveInstallPath + "gtkwave.exe";
            } else if (this.opeParam.os == "linux") {
                gtkwavePath = gtkwaveInstallPath + "gtkwave";
            }
        }

        // 获取对应厂商的仿真库路径
        if (filesys.files.isHasAttr(this.opeParam.prjInfo, "FPGA_VERSION")) {
            if (this.opeParam.prjInfo.FPGA_VERSION == "xilinx") {
                this.xilinxLibPath();
            }				
        }         

        // 获取该模块仿真时所需要的依赖
        let dependenceFilePathList = parser.utils.getModuleDependence(HDLparam, module);
        
        dependenceFilePathList.forEach(element => {
            rtlFilePath = rtlFilePath + element + " ";
        });
        
        rtlFilePath = rtlFilePath.replace(/\\/g,"\/").replace("//","/");
        let command = `${iVerilogPath} ` +
        `-g2012 ` + 
        `-o ${this.runFilePath}/out.vvp ` + 
        `-s ${module.name} ` + 
        `${docPath} ` + 
        `${rtlFilePath} ` + 
        `${this.GlblPath} ` + 
        `${this.LibPath}`;

        let currentRunFilePath = fspath.dirname(docPath);
        let currentOutFilePath = this.runFilePath;
        let content = fs.readFileSync(docPath, "utf-8");
        let waveImagePath = parser.utils.getWaveImagePath(content);
        child.exec(command, { cwd: currentRunFilePath }, function (error, stdout, stderr) {
            vscode.window.showInformationMessage(stdout);
            if (error !== null) {
                stderr = "ERROR From iverilog : \n" + stderr;
                vscode.window.showErrorMessage(stderr);
            } else {
                vscode.window.showInformationMessage("iVerilog simulates successfully!!!");
                let Exists_flag = false;
                var vvp = null;
                vscode.window.terminals.forEach(element => {
                    if (element.name == "vvp") {
                        vvp = element;
                        Exists_flag = true;
                        return;
                    }
                });
                if (!Exists_flag) {
                    vvp = vscode.window.createTerminal({ name: 'vvp' });
                }
                let cmd = "";
                if (waveImagePath != '') {
                    let waveImageExtname = waveImagePath.split('.');
                    cmd = `${vvpPath} ${currentOutFilePath}/out.vvp -${waveImageExtname[waveImageExtname.length-1]}`;
                } else {
                    cmd = `${vvpPath} ${currentOutFilePath}/out.vvp`;
                }
                vvp.show(true);
                vvp.sendText(cmd);
                if (waveImagePath != '') {
                    vvp.sendText(`${gtkwavePath} ${waveImagePath}`);
                } else {
                    vscode.window.showWarningMessage("There is no wave image path in this testbench");
                }
            }
        });
    }

    xilinxLibPath() {
        this.simLibRootPath = this.setting.get('SIM.Xilinx.LIB.path');
        if (this.simLibRootPath != "") {
            this.GlblPath = this.simLibRootPath + "/glbl.v ";
            this.LibPath  = "-y " + this.simLibRootPath + "/xeclib ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unisims ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unimacro ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/unifast ";
            this.LibPath  = this.LibPath + "-y " + this.simLibRootPath + "/retarget ";
        } else {
            vscode.window.showInformationMessage("SIM.Xilinx.LIB.path is empty");
        }
    }
}
exports.iverilogSimulate = iverilogSimulate;
