"use strict";

const vscode = require("vscode");
const parser = require("HDLparser");

function Overwrite_tb(opeParam) {
    const path = `${opeParam.rootPath}/.TOOL/.Data/testbench.v`;
    const options = {
        preview: false,
        viewColumn: vscode.ViewColumn.Active
    };
    vscode.window.showTextDocument(vscode.Uri.file(path), options);
}
exports.Overwrite_tb = Overwrite_tb;


function iverilogSimulate(opeParam, HDLparam) {
    let editor = vscode.window.activeTextEditor;
    if (!editor) {
        return;
    }
    // 获取运行时的路径
    if (this.runFilePath == "") {
        this.runFilePath = `${opeParam.workspacePath}prj/simulation/iVerilog`
        this.folder.mkdir(this.runFilePath);
    }

    // 获取运行工具的路径
    let vvpPath      = "vvp";
    let gtkwavePath  = "gtkwave";
    let iVerilogPath = "iverilog";
    if (this.installPath != "") {
        vvpPath = iVerilogInstallPath + "vvp.exe";
        iVerilogPath = iVerilogInstallPath + "iverilog.exe";
    }
    if (gtkwaveInstallPath != "") {
        gtkwavePath = gtkwaveInstallPath + "gtkwave.exe";
    }

    // 获取对应厂商的仿真库路径
    let LibPath = "";
    let GlblPath = "";
    let simLibRootPath = "";
    if (opeParam.propertyPath != '') {
        if (this.property.getFpgaVersion(opeParam.propertyPath) == "xilinx") {					
            simLibRootPath = vscode.workspace.getConfiguration().get('TOOL.xilinx.install.path');
            if (simLibRootPath != "") {                
                simLibRootPath = simLibRootPath + "/Vivado/2018.3/data/verilog/src";
                GlblPath = simLibRootPath + "/glbl.v ";
                LibPath  = "-y " + simLibRootPath + "/xeclib ";
                LibPath = LibPath + "-y " + simLibRootPath + "/unisims ";
                LibPath = LibPath + "-y " + simLibRootPath + "/unimacro ";
                LibPath = LibPath + "-y " + simLibRootPath + "/unifast ";
                LibPath = LibPath + "-y " + simLibRootPath + "/retarget ";
            } else {
                vscode.window.showInformationMessage("TOOL.xilinx.install.path is empty");
            }
        }
    }

    // 获取当前文件的模块名和模块数
    let moduleNameList = [];
    HDLparam.forEach(element => {
        if (element.modulePath == editor.document.fileName) {
            moduleNameList.push(element.moduleName);
        }
    });
    if (moduleNameList.length != 0) {
        // 选择要仿真的模块
        let simModuleName = '';
        if (moduleNameList.length >= 2) {
            vscode.window.showInformationMessage("There are multiple modules, please select one of them");
            simModuleName = __awaiter(this, void 0, void 0, function* () {
                vscode.window.showQuickPick(moduleNameList).then(selection => {
                    if (!selection) {
                        return null;
                    } else {
                        return selection;
                    }
                });
            });
        }
        else {
            simModuleName = moduleNameList[0];
        }
        let rtlFilePath  = "";
        let iverilogPath = "";
        iverilogPath = opeParam.workspacePath + "prj/simulation/iVerilog/" + simModuleName;
        iverilogPath = editor.document.fileName;                    

        // 获取所有例化模块所在文件的路径
        let instmoduleFilePathList = [];
        HDLparam.forEach(unitModule => {     
            if (unitModule.moduleName == simModuleName) {
                unitModule.instmodule.forEach(instanceModule => {
                    instmoduleFilePathList.push(instanceModule.instModPath);
                });
            }          
        });
        instmoduleFilePathList = this.array.removeDuplicates(instmoduleFilePathList);
        instmoduleFilePathList.forEach(element => {
            rtlFilePath = rtlFilePath + element + " ";
        });
    
        let command = `${iVerilogPath} -g2012 -o ${iverilogPath} ${editor.document.fileName} ${rtlFilePath} ${GlblPath} ${LibPath}`;

        let waveImagePath = this.parse.getWaveImagePath(editor.document.text);
        child.exec(command, { cwd: this.runFilePath }, function (error, stdout, stderr) {
            vscode.window.showInformationMessage(stdout);
            if (error !== null) {
                vscode.window.showErrorMessage(stderr);
            } else {
                vscode.window.showInformationMessage("iVerilog simulates successfully!!!");
                if (waveImagePath != '') {
                    let waveImageExtname = waveImagePath.split('.');
                    let Simulate = vscode.window.createTerminal({ name: 'Simulate' });
                    Simulate.show(true);
                    Simulate.sendText(`${vvpPath} ${iverilogPath} -${waveImageExtname[waveImageExtname.length-1]}`);
                    let gtkwave = vscode.window.createTerminal({ name: 'gtkwave' });
                    gtkwave.show(true);
                    gtkwave.sendText(`${gtkwavePath} ${waveImagePath}`);

                } else {
                    vscode.window.showWarningMessage("There is no wave image path in this testbench");
                }
            }
        });
    }         
    else {
        vscode.window.showWarningMessage("There is no module in this file")
    }
}