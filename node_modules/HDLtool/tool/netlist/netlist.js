"use strict";

const fs = require("fs");
const fspath  = require("path");
const vscode  = require("vscode");
const parser  = require("HDLparser");
const kernel  = require("HDLkernel");
const filesys = require("HDLfilesys");

class showNetlist {
    constructor(context, opeParam, HDLparam) {
        this.panel = undefined;
        this.context = context;
        this.opeParam = opeParam;
        this.HDLparam = HDLparam;
        this.mode = '1';
    }

    open_viewer(uri) {
        let docPath = uri.fsPath.replace(/\\/g, "\/").replace("//", "/");
        if (this.panel == undefined) {
            this.createViewer();
        }
        if (filesys.files.isHasAttr(uri, "type")) {
            if (uri.type != null) {
                this.sendPrjNetlist({
                    name: uri.type,
                    path: docPath
                });
            }
        } else {
            // 获取当前文件的模块名和模块数 选择要仿真的模块
            parser.utils.selectCurrentFileModule(this.HDLparam, docPath).then((selectModule) => {
                if (selectModule != null) {
                    this.sendPrjNetlist({
                        name: selectModule.moduleName,
                        path: selectModule.modulePath
                    });
                }
            });
        }
    }

    createViewer() {
        // Create panel
        this.panel = vscode.window.createWebviewPanel(
            'netlist_viewer',
            'Schematic viewer',
            vscode.ViewColumn.One, {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );
        this.panel.onDidDispose(() => {
            // When the panel is closed, cancel any future updates to the webview content
            this.panel = undefined;
        }, null, this.context.subscriptions);
        // Handle messages from the webview
        this.panel.webview.onDidReceiveMessage(message => {
            switch (message.command) {
                case 'export':
                    this.export_as(message.type, message.svg);
                break;
                case 'exec' :
                    let netlist = this.synth.ope.exportJson(message.mode);
                    this.panel.webview.postMessage({ command: "netlist", netlist: netlist });
                break;
            }
        }, undefined, this.context.subscriptions);
        let previewHtml = this.getWebviewContent();
        this.panel.webview.html = previewHtml;
    }

    async sendPrjNetlist(module) {
        // 获取工程依赖
        let dependenceFilePathList = parser.utils.getModuleDependence(this.HDLparam, module, "all");

        // 向内核中导入工程
        this.synth = await kernel.launch();

        // 将执行过程中的日志输出到webview
        this.synth.ope.setMessageCallback((message, type) => {
            if (type == "error") {
                vscode.window.showErrorMessage(`${type} : ${message}`);
            }
        });

        // 将需要综合的文件进行导入内核
        this.synth.ope.loadFileDirect(dependenceFilePathList.inst);
        this.synth.ope.loadFileDirect(dependenceFilePathList.include);
        this.synth.ope.loadFileDirect([module.path]);

        // 导出模块的netlist
        let netlist = this.synth.ope.exportJson(this.mode);
        this.panel.webview.postMessage({ command: "netlist", netlist: netlist });
    }



    getWebviewContent() {
        const src_path = `${this.opeParam.rootPath}/../resources/netlist`;
        const html_path = src_path + '/netlist_viewer.html';
        let html = fs.readFileSync(html_path, 'utf-8');
        html = html.replace(/(<link.+?href="|<script.+?src="|<img.+?src=")(.+?)"/g, (m, $1, $2) => {
            return $1 + vscode.Uri.file(fspath.resolve(src_path, $2)).with({ scheme: 'vscode-resource' }).toString() + '"';
        });
        return html;
    }

    export_as(type, svg) {
        if (type === "svg") {
            let filter = { 'svg': ['svg'] };
            vscode.window.showSaveDialog({ filters: filter }).then(fileInfos => {
                let path_full = fileInfos === null || fileInfos === void 0 ? void 0 : fileInfos.path;
                if (path_full !== undefined) {
                    if (path_full[0] === '/' && require('os').platform() === 'win32') {
                        path_full = path_full.substring(1);
                    }
                    fs.writeFileSync(path_full, svg);
                    vscode.window.showInformationMessage(`Schematic saved in ${path_full}`);
                }
            });
        } else {
            console.log("Error export documentation.");
        }
    }
}
module.exports = showNetlist;