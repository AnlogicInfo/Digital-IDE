"use strict";

const fs     = require("fs");
const vscode = require("vscode");

var SerialPortBinding = require('./serialport/serialport');

class serialport {
    constructor(context, opeParam, sperialportNode) {
        this.panel    = undefined;
        this.context  = context;
        this.opeParam = opeParam;

        this.SerialPort = new SerialPortBinding(sperialportNode);
    }

    open_viewer() {
        var serialPort = new serialport.SerialPort(com_num, {
            parity:   this.Parity,    //校验位
            baudrate: this.BaudRate,  //波特率设置
            databits: this.DataBits,  //数据位
            stopbits: this.StopBits   //停止位
        });
        this.create_viewer();
    }

    create_viewer() {
        // Create panel
        this.panel = vscode.window.createWebviewPanel(
            'netlist_viewer', 
            'Schematic viewer', 
            vscode.ViewColumn.One, 
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );
        this.panel.onDidDispose(() => {
            // When the panel is closed, cancel any future updates to the webview content
            this.panel = undefined;
        }, null, this.context.subscriptions);
        // Handle messages from the webview
        this.panel.webview.onDidReceiveMessage(message => {
            switch (message.command) {
                case 'command': this.commandParse(message.content); return;
            }
        }, undefined, this.context.subscriptions);
        let previewHtml = this.getWebviewContent();
        this.panel.webview.html = previewHtml;
    }

    getWebviewContent() {
        const src_path  = `${this.opeParam.rootPath}/../resources/serialport`;
        const html_path = src_path + '/serialport.html';
        let html = fs.readFileSync(html_path, 'utf-8');
        html = html.replace(/(<link.+?href="|<script.+?src="|<img.+?src=")(.+?)"/g, (m, $1, $2) => {
            return $1 + vscode.Uri.file(fspath.resolve(src_path, $2)).with({ scheme: 'vscode-resource' }).toString() + '"';
        });
        return html;
    }

    commandParse(command) {
        switch (command) {
            case "pl": this.showPorts(); break;

            default: break;
        }
    }

    showPorts() {
        this.SerialPort.list()
        .then((ports) => {
            console.log(ports);
            let info = '--------------------------------\n';
            for (let index = 0; index < ports.length; index++) {
                const port = ports[index];
                info += `port : ${port.path}\n`;
                info += `manufacturer : ${port.manufacturer}\n`;
                info += `pnpId : ${port.pnpId}\n`;
                info += '--------------------------------\n';
            }
            if (ports.length == 0) {
                info = 'There is no available serialport'
            }
            this.panel.webview.postMessage({ 
                command: "cmdback", 
                content: info
            });
        })
        .catch((err) => {
            console.log(err);
        });
    }

    configPort() {

    }

    sendMessage() {

    }

    receiveMessage() {
        
    }
}
exports.serialport = serialport;