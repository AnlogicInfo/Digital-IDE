const serialPort = require('serialport');
const vscode = require("vscode");
const fs =require("fs");

class serialport {
    constructor(context, opeParam) {
        this.panel    = undefined;
        this.context  = context;
        this.opeParam = opeParam;
    }

    open_viewer() {
        var serialPort = new serialport.SerialPort(com_num, {
            parity:   this.Parity,    //校验位
            baudrate: this.BaudRate,  //波特率设置
            databits: this.DataBits,  //数据位
            stopbits: this.StopBits   //停止位
        });
        this.create_viewer();
    }

    create_viewer() {
        // Create panel
        this.panel = vscode.window.createWebviewPanel(
            'netlist_viewer', 
            'Schematic viewer', 
            vscode.ViewColumn.One, 
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );
        this.panel.onDidDispose(() => {
            // When the panel is closed, cancel any future updates to the webview content
            this.panel = undefined;
        }, null, this.context.subscriptions);
        let previewHtml = this.getWebviewContent();
        this.panel.webview.html = previewHtml;
    }

    getWebviewContent() {
        const src_path  = `${this.opeParam.rootPath}/../resources/serialport`;
        const html_path = src_path + '/command.html';
        let html = fs.readFileSync(html_path, 'utf-8');
        html = html.replace(/(<link.+?href="|<script.+?src="|<img.+?src=")(.+?)"/g, (m, $1, $2) => {
            return $1 + vscode.Uri.file(fspath.resolve(src_path, $2)).with({ scheme: 'vscode-resource' }).toString() + '"';
        });
        return html;
    }
}
exports.serialport = serialport;