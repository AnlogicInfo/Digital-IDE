"use strict";

const vscode = require("vscode");

const soc = require("./soc/soc");
const tree = require("./tree/tree");
const tool = require("./tool/tool");
const build = require("./build/build");
const xilinx = require("./build/xilinx");

const lspProvider = require("./lsp/provider");
const lspFormatter = require("./lsp/formatter");
const lspCompletion = require("./lsp/completion");
const lspTranslation = require("./lsp/translation");

const simulation = require("./sim/simulation");
const simInstance = require("./sim/instance");
const simTemplate = require("./sim/template");
const simTestbench = require("./sim/testbench");

exports.tree = tree;
exports.build = build;
exports.xilinx = xilinx;

exports.lspProvider = lspProvider;
exports.lspCompletion = lspCompletion;
exports.simulation = simulation;
exports.simInstance = simInstance;
exports.simTestbench = simTestbench;

/**
 * HDL语言服务注册函数
 * @param {*} context 
 * @param {*} indexer 
 */
function registerLspServer(context, indexer) {

    // Configure Provider manager
    const HDL_lsp = [
        { scheme: 'file', language: 'systemverilog' },
        { scheme: 'file', language: 'verilog' },
        { scheme: 'file', language: 'vhdl' }
    ];

    // VHDL Language sever
    vscode.languages.setLanguageConfiguration(HDL_lsp[2].language, {
        indentationRules: {
            increaseIndentPattern: /^.*(begin|then|loop|is)$/,
            decreaseIndentPattern: /^end\s+\w*$/
        },
        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
    });
    vscode.languages.registerDocumentFormattingEditProvider(
        HDL_lsp,
        new lspFormatter.Formatter()
    );
    vscode.languages.registerCompletionItemProvider(
        [HDL_lsp[0], HDL_lsp[1]],
        new lspCompletion.vlogCompletion(indexer.HDLparam),
        '.');
    vscode.languages.registerCompletionItemProvider(
        HDL_lsp[2],
        new lspCompletion.vhdlCompletion(),
        ['.', '\"']);
    vscode.languages.registerCompletionItemProvider(
        { scheme: 'file', language: 'json' },
        new lspCompletion.jsonCompletion(),
        '/');

    // Providers
    const hovProvider = new lspProvider.HoverProvider();
    const numProvider = new lspProvider.numberHoverProvider();
    const defProvider = new lspProvider.DefinitionProvider(indexer);
    const docProvider = new lspProvider.DocumentSymbolProvider(indexer);
    const symProvider = new lspProvider.WorkspaceSymbolProvider(indexer);
    context.subscriptions.push(vscode.languages.registerHoverProvider(HDL_lsp, hovProvider));
    context.subscriptions.push(vscode.languages.registerHoverProvider(HDL_lsp, numProvider));
    context.subscriptions.push(vscode.languages.registerWorkspaceSymbolProvider(symProvider));
    context.subscriptions.push(vscode.languages.registerDefinitionProvider(HDL_lsp, defProvider));
    context.subscriptions.push(vscode.languages.registerDocumentSymbolProvider(HDL_lsp, docProvider));

    // Translate
    vscode.commands.registerCommand('TOOL.vhdl2vlog', (uri) => {
        let docPath = uri.fsPath.replace(/\\/g,"\/").replace("//","/");
        lspTranslation.vhdl2vlog(docPath);
    });
}
exports.registerLspServer = registerLspServer;

/**
 * 快速仿真服务注册函数
 * @param {*} indexer 
 * @param {*} opeParam 
 */
function registerSimServer(indexer, opeParam, outputChannel) {
    var simulate = new simulation.iverilogSimulate(opeParam, outputChannel);

    vscode.commands.registerCommand('TOOL.simulate', (uri) => {
        simulate.simulate(uri, indexer.HDLparam);
    });
    vscode.commands.registerCommand('TOOL.instance', () => {
        simInstance.instantiateModuleInteract(indexer);
    });
    vscode.commands.registerCommand('TOOL.testbench', (uri) => {
        simTestbench.genInstancetoTbFile(indexer, opeParam, uri);
    });
    vscode.commands.registerCommand('TOOL.Generate_template', () => {
        simTemplate.get_template();
    });
    vscode.commands.registerCommand('TOOL.Overwrite_tb', () => {
        simTestbench.Overwrite_tb(opeParam);
    });
}
exports.registerSimServer = registerSimServer;

/**
 * 树状结构服务注册函数
 * @param {*} opeParam 
 */
function registerTreeServer(opeParam) {
    // // Tree View
    vscode.window.registerTreeDataProvider('TOOL.soft_tree', new tree.softTreeDataProvider(opeParam));
    vscode.window.registerTreeDataProvider('TOOL.hard_tree', new tree.hardTreeDataProvider(opeParam));
    vscode.window.registerTreeDataProvider('TOOL.Tool_tree', new tree.toolTreeDataProvider(opeParam));
}
exports.registerTreeServer = registerTreeServer;

/**
 * 内置前端设计辅助服务注册函数
 * @param {*} context 
 * @param {*} indexer 
 * @param {*} opeParam 
 */
function registerToolServer(context, indexer, opeParam) {

    let netlist_viewer = new tool.showNetlist(context, opeParam, indexer.HDLparam);
    vscode.commands.registerCommand('TOOL.netlist', (uri) => {
        netlist_viewer.open_viewer(uri);
    });

    let fsm_viewer = new tool.showFSMGraph(context, opeParam, indexer.HDLparam);
    vscode.commands.registerCommand('TOOL.FSMGraph', (uri) => {
        fsm_viewer.open_viewer(uri);
    });
}
exports.registerToolServer = registerToolServer;

/**
 * 后端硬件设计辅助服务注册函数
 * @param {*} context 
 * @param {*} indexer 
 * @param {*} opeParam 
 * @param {*} fileExplorer 
 */
function registerHardServer(context, indexer, opeParam, fileExplorer) {
    let hardwareBuild = new build.hardwareRegister(context, opeParam);
    vscode.commands.registerCommand('HARD.Launch', () => {
        hardwareBuild.Launch();
    });
    vscode.commands.registerCommand('HARD.Refresh', () => {
        hardwareBuild.Refresh();
    });
    vscode.commands.registerCommand('HARD.srcTop', (uri) => {
        hardwareBuild.setSrcTop(uri, indexer.HDLparam, fileExplorer);
    });
    vscode.commands.registerCommand('HARD.simTop', (uri) => {
        hardwareBuild.setSimTop(uri, indexer.HDLparam, fileExplorer);
    });
    vscode.commands.registerCommand('HARD.Simulate', () => {
        hardwareBuild.Simulation();
    });
    vscode.commands.registerCommand('HARD.Build', () => {
        hardwareBuild.Build();
    });
    vscode.commands.registerCommand('HARD.Synth', () => {
        hardwareBuild.Synth();
    });
    vscode.commands.registerCommand('HARD.Impl', () => {
        hardwareBuild.Impl();
    });
    vscode.commands.registerCommand('HARD.Gen_Bit', () => {
        hardwareBuild.Gen_Bit();
    });
    vscode.commands.registerCommand('HARD.Program', () => {
        hardwareBuild.Program();
    });
    vscode.commands.registerCommand('HARD.GUI', () => {
        hardwareBuild.GUI();
    });
    vscode.commands.registerCommand('HARD.Exit', () => {
        hardwareBuild.Exit();
    });
}
exports.registerHardServer = registerHardServer;

/**
 * 软件设计辅助服务注册函数
 * @param {*} opeParam 
 */
function registerSoftServer(opeParam) {
    let softwareRegister = new soc.softwareRegister(opeParam);
    vscode.commands.registerCommand('SOFT.Launch', () => {
        softwareRegister.SDK_Launch();
    });
    vscode.commands.registerCommand('SOFT.Build', () => {
        softwareRegister.SDK_Build();
    });
    vscode.commands.registerCommand('SOFT.Download', () => {
        softwareRegister.SDK_Download();
    });
}
exports.registerSoftServer = registerSoftServer;

function registerXilinxServer(opeParam) {
    vscode.commands.registerCommand('xilinx.Overwrite_bd', () => {
        xilinx.Overwrite_bd(opeParam);
    });
    vscode.commands.registerCommand('xilinx.Add_bd', () => {
        xilinx.Add_bd(opeParam);
    });
    vscode.commands.registerCommand('xilinx.Delete_bd', () => {
        xilinx.Delete_bd(opeParam);
    });
}
exports.registerXilinxServer = registerXilinxServer;
