"use strict";

const vscode = require("vscode");

const soc = require("./soc/soc");
const tree = require("./tree/tree");
const build = require("./build/build");
const debug = require("./debug/debug");
const xilinx = require("./build/xilinx");

// const serialport = require("./tool/serialport");

const lspProvider = require("./lsp/provider");
const lspFormatter = require("./lsp/formatter");
const lspCompletion = require("./lsp/completion");

const simulation = require("./sim/simulation");
const simInstance = require("./sim/instance");
const simTemplate = require("./sim/template");
const simTestbench = require("./sim/testbench");

// const fsm_viewer   = require("./tool/fsm/fsm_viewer");
// const fsm_designer = require("./tool/fsm/fsm_designer");

exports.tree = tree;
exports.build = build;
exports.xilinx = xilinx;

exports.lspProvider = lspProvider;
exports.lspCompletion = lspCompletion;
exports.simulation = simulation;
exports.simInstance = simInstance;
exports.simTestbench = simTestbench;

function registerLspServer(context, indexer) {

    // Configure Provider manager
    const HDL_lsp = [
        { scheme: 'file', language: 'systemverilog' },
        { scheme: 'file', language: 'verilog' },
        { scheme: 'file', language: 'vhdl' }
    ];

    // VHDL Language sever
    vscode.languages.setLanguageConfiguration(HDL_lsp[2].language, {
        indentationRules: {
            increaseIndentPattern: /^.*(begin|then|loop|is)$/,
            decreaseIndentPattern: /^end\s+\w*$/
        },
        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
    });
    vscode.languages.registerDocumentFormattingEditProvider(
        HDL_lsp,
        new lspFormatter.Formatter()
    );
    vscode.languages.registerCompletionItemProvider(
        [HDL_lsp[0], HDL_lsp[1]],
        new lspCompletion.vlogCompletion(indexer.HDLparam),
        '.');
    vscode.languages.registerCompletionItemProvider(
        HDL_lsp[2],
        new lspCompletion.vhdlCompletion(),
        ['.', '\"']);
    vscode.languages.registerCompletionItemProvider(
        { scheme: 'file', language: 'json' },
        new lspCompletion.jsonCompletion(),
        '/');
    // Providers
    const hovProvider = new lspProvider.HoverProvider();
    const numProvider = new lspProvider.numberHoverProvider();
    const defProvider = new lspProvider.DefinitionProvider(indexer);
    const docProvider = new lspProvider.DocumentSymbolProvider(indexer);
    const symProvider = new lspProvider.WorkspaceSymbolProvider(indexer);
    context.subscriptions.push(vscode.languages.registerHoverProvider(HDL_lsp, hovProvider));
    context.subscriptions.push(vscode.languages.registerHoverProvider(HDL_lsp, numProvider));
    context.subscriptions.push(vscode.languages.registerWorkspaceSymbolProvider(symProvider));
    context.subscriptions.push(vscode.languages.registerDefinitionProvider(HDL_lsp, defProvider));
    context.subscriptions.push(vscode.languages.registerDocumentSymbolProvider(HDL_lsp, docProvider));
}
exports.registerLspServer = registerLspServer;

function registerSimServer(indexer, opeParam) {
    var simulate = new simulation.iverilogSimulate(opeParam);

    vscode.commands.registerCommand('TOOL.simulate', (uri) => {
        simulate.simulate(uri, indexer.HDLparam);
    });
    vscode.commands.registerCommand('TOOL.instance', () => {
        simInstance.instantiateModuleInteract(indexer);
    });
    vscode.commands.registerCommand('TOOL.testbench', (uri) => {
        simTestbench.genInstancetoTbFile(indexer, opeParam, uri);
    });
    vscode.commands.registerCommand('TOOL.Generate_template', () => {
        simTemplate.get_template();
    });
    vscode.commands.registerCommand('TOOL.Overwrite_tb', () => {
        simTestbench.Overwrite_tb(opeParam);
    });
}
exports.registerSimServer = registerSimServer;

function registerTreeServer(opeParam) {
    // // Tree View
    vscode.window.registerTreeDataProvider('TOOL.sdk_tree', new tree.sdkTreeDataProvider(opeParam));
    vscode.window.registerTreeDataProvider('TOOL.fpga_tree', new tree.fpgaTreeDataProvider(opeParam));
    vscode.window.registerTreeDataProvider('TOOL.Tool_tree', new tree.toolTreeDataProvider(opeParam));
}
exports.registerTreeServer = registerTreeServer;

function registerBuildServer(context, indexer, opeParam, fileExplorer) {
    let netlist_viewer_manager = new build.synthNetlist(context, opeParam, indexer.HDLparam);
    vscode.commands.registerCommand('TOOL.netlist.viewer', (uri) => {
        netlist_viewer_manager.open_viewer(uri);
    });
    vscode.commands.registerCommand('TOOL.netlist', (uri) => {
        netlist_viewer_manager.refresh_prj(uri);
    });

    let xilinxBuild = new build.fpgaRegister(context, opeParam);
    vscode.commands.registerCommand('FPGA.Launch', () => {
        xilinxBuild.Launch();
    });
    vscode.commands.registerCommand('FPGA.Refresh', () => {
        xilinxBuild.Refresh();
    });
    vscode.commands.registerCommand('FPGA.srcTop', (uri) => {
        xilinxBuild.setSrcTop(uri, indexer.HDLparam, fileExplorer);
    });
    vscode.commands.registerCommand('FPGA.simTop', (uri) => {
        xilinxBuild.setSimTop(uri, indexer.HDLparam, fileExplorer);
    });
    vscode.commands.registerCommand('FPGA.Simulate', () => {
        xilinxBuild.Simulation();
    });
    vscode.commands.registerCommand('FPGA.Build', () => {
        xilinxBuild.Build();
    });
    vscode.commands.registerCommand('FPGA.Synth', () => {
        xilinxBuild.Synth();
    });
    vscode.commands.registerCommand('FPGA.Impl', () => {
        xilinxBuild.Impl();
    });
    vscode.commands.registerCommand('FPGA.Gen_Bit', () => {
        xilinxBuild.Gen_Bit();
    });
    vscode.commands.registerCommand('FPGA.Program', () => {
        xilinxBuild.Program();
    });
    vscode.commands.registerCommand('FPGA.GUI', () => {
        xilinxBuild.GUI();
    });
    vscode.commands.registerCommand('FPGA.Exit', () => {
        xilinxBuild.Exit();
    });
}
exports.registerBuildServer = registerBuildServer;

// function registerDebugServer(context, opeParam) {
//     let toolRegister = new serialport.serialport(context, opeParam);
//     vscode.commands.registerCommand('TOOL.SerialPort', () => {
//         toolRegister.open_viewer();
//     });
// }
// exports.registerDebugServer = registerDebugServer;

function registerToolServer(opeParam) {
    let toolRegister = new debug.toolRegister(opeParam);
    vscode.commands.registerCommand('TOOL.Clean', () => {
        toolRegister.clean();
    });

    // var state_machine_viewer_manager = new state_machine_viewer.default(context, opeParam);
    // vscode.commands.registerCommand('TOOL.state_machine.viewer', () => __awaiter(this, void 0, void 0, function* () {
    //     yield state_machine_viewer_manager.open_viewer();
    // })), vscode.workspace.onDidOpenTextDocument((e) => state_machine_viewer_manager.update_viewer()), vscode.workspace.onDidSaveTextDocument((e) => state_machine_viewer_manager.update_viewer()), vscode.workspace.onDidChangeTextDocument((e) => state_machine_viewer_manager.update_viewer()), vscode.window.onDidChangeVisibleTextEditors((e) => state_machine_viewer_manager.update_visible_viewer(e));

    // var state_machine_designer_manager = new state_machine_designer.default(context, opeParam);
    // vscode.commands.registerCommand('TOOL.state_machine.designer', () => __awaiter(this, void 0, void 0, function* () {
    //     yield state_machine_designer_manager.open_viewer();
    // }));
}
exports.registerToolServer = registerToolServer;

function registerSocServer(opeParam) {
    let socRegister = new soc.socRegister(opeParam);
    vscode.commands.registerCommand('SDK.Launch', () => {
        socRegister.SDK_Launch();
    });
    vscode.commands.registerCommand('SDK.Build', () => {
        socRegister.SDK_Build();
    });
    vscode.commands.registerCommand('SDK.Download', () => {
        socRegister.SDK_Download();
    });
}
exports.registerSocServer = registerSocServer;

function registerXilinxServer(opeParam) {
    vscode.commands.registerCommand('FPGA.Overwrite_bd', () => {
        xilinx.Overwrite_bd(opeParam);
    });
    vscode.commands.registerCommand('FPGA.Add_bd', () => {
        xilinx.Add_bd(opeParam);
    });
    vscode.commands.registerCommand('FPGA.Delete_bd', () => {
        xilinx.Delete_bd(opeParam);
    });
}
exports.registerXilinxServer = registerXilinxServer;
