"use strict";

const vscode = require("vscode");

const lspProvider   = require("./lsp/provider");
const lspCompletion = require("./lsp/completion");

function registerLspServer(context, parser, symbol) {
    // Configure Provider manager
    const HDL_lsp = [
        { scheme: 'file', language: 'systemverilog' }, 
        { scheme: 'file', language: 'verilog' },
        { scheme: 'file', language: 'vhdl' }
    ];
    
    // VHDL Language sever
    context.subscriptions.push(
        vscode.languages.registerCompletionItemProvider(
            HDL_lsp[2], 
            new lspCompletion.VhdlCompletion(), 
            '.', 
            '\"'));
    vscode.languages.setLanguageConfiguration(HDL_lsp[2].language, {
        indentationRules: {
            increaseIndentPattern: /^.*(begin|then|loop|is)$/,
            decreaseIndentPattern: /^end\s+\w*$/
        },
        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
    });

    // Providers
    const hovProvider = new lspProvider.HoverProvider();
    const docProvider = new lspProvider.DocumentSymbolProvider(parser);
    const symProvider = new lspProvider.WorkspaceSymbolProvider(symbol);
    const defProvider = new lspProvider.DefinitionProvider(symProvider);
	context.subscriptions.push(vscode.languages.registerWorkspaceSymbolProvider(symProvider));
    context.subscriptions.push(vscode.languages.registerHoverProvider(HDL_lsp, hovProvider));
    context.subscriptions.push(vscode.languages.registerDefinitionProvider(HDL_lsp, defProvider));
    context.subscriptions.push(vscode.languages.registerDocumentSymbolProvider(HDL_lsp, docProvider));
}
exports.registerLspServer = registerLspServer;