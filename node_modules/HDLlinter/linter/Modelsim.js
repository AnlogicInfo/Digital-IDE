
const Base_linter = require('./base_linter');

class Modelsim extends Base_linter {

    constructor() {
        super();
        // VHDL
        this.VHDLPARAMETERS = {
            'SYNT': "vcom -quiet -nologo -2008"
        };
        // SystemVerilog
        this.SVLOGPARAMETERS = {
            'SYNT': "vlog -quiet -nologo -sv"
        };
        // Verilog
        this.VLOGPARAMETERS = {
            'SYNT': "vlog -quiet -nologo"
        };
    }

    // options = {custom_bin:"", custom_arguments:""}
    async lint_from_file(file, options, parameter) {
        let errors = await this._lint(file, options, parameter);
        return errors;
    }

    async lint_from_code(file, code, options, parameter) {
        let temp_file = await this._create_temp_file_of_code(code);
        let errors = await this._lint(temp_file, options, parameter);
        return errors;
    }

    async _lint(file, options, parameter) {
        let result = await this._exec_linter(file, parameter.SYNT,
            parameter.SYNT_WINDOWS, options);
        file = file.replace('\\ ', ' ');
        let errors_str = result.stdout;
        let errors_str_lines = errors_str.split(/\r?\n/g);
        let errors = [];

        // Parse output lines
        errors_str_lines.forEach((line) => {
            if (line.startsWith('**')) {
                // eslint-disable-next-line max-len
                let regex_exp = /(Error|Warning).+?(?: *?(?:.+?(?:\\|\/))+.+?\((\d+?)\):|)(?: *?near "(.+?)":|)(?: *?\((.+?)\)|) +?(.+)/gm;
                // From https://github.com/dave2pi/SublimeLinter-contrib-vlog/blob/master/linter.py
                let m = regex_exp.exec(line);
                try {
                    //Severity
                    let sev = "warning";
                    if (m[1] === "Error") {
                        sev = "error";
                    }
                    else if (m[1] === "Warning") {
                        sev = "warning";
                    }
                    else {
                        sev = "note";
                    }

                    if (sev !== "note") {
                        let message = m[5];
                        let code = m[4];
                        let line = parseInt(m[2]) - 1;

                        let error = {
                            'severity': sev,
                            'description': message,
                            'code': code,
                            'location': {
                                'file': file,
                                'position': [line, 0]
                            }
                        };
                        errors.push(error);
                    }
                }
                catch (e) {
                    // eslint-disable-next-line no-console
                    // console.log(e);
                }
            }
        });
        return errors;
    }
}

module.exports = {
    Modelsim: Modelsim
};
