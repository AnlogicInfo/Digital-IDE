
const os = require('os');
const fs = require('fs');
const temp = require('temp');
const path = require('path');

class Base_linter {
    _get_command(file, synt, synt_windows, options) {
        let command = "";
        if (options !== undefined && options.custom_bin !== undefined) {
            command += options.custom_bin + " ";
        }
        else if (os.platform() === "win32") {
            if (options !== undefined && options.custom_path !== undefined) {
                command += options.custom_path + path.sep + synt_windows + " ";
            }
            else {
                command += synt_windows + " ";
            }
        }
        else {
            if (options !== undefined && options.custom_path !== undefined) {
                command += options.custom_path + path.sep + synt + " ";
            }
            else {
                command += synt + " ";
            }
        }

        if (options !== undefined && options.custom_arguments !== undefined) {
            command += options.custom_arguments + " ";
        }

        command += file;
        return command;
    }

    async create_temp_file_of_code(content) {
        const temp_file = temp.openSync();
        if (temp_file === undefined) {
            // eslint-disable-next-line no-throw-literal
            throw "Unable to create temporary file";
        }
        fs.writeSync(temp_file.fd, content);
        fs.closeSync(temp_file.fd);
        return temp_file.path;
    }

    async _exec_linter(file, synt, synt_windows, options) {
        let command = this._get_command(file, synt, synt_windows, options);
        console.log(`[colibri][info] Linting with command: ${command}`);
        const exec = require('child_process').exec;
        return new Promise((resolve) => {
            exec(command, (error, stdout, stderr) => {
                let result = { 'stdout': stdout, 'stderr': stderr };
                if (stderr !== '') {
                    // console.log(`[colibri][error] ${stderr}`);
                }
                resolve(result);
            });
        });
    }
}

module.exports = Base_linter;
