"use strict";

function getWaveImagePath (text) {
    let waveImagePath = text.match(/\$dumpfile\s+\(\s*\"(.+){1}\"\s*\);/gi);
    waveImagePath = RegExp.$1;
    return waveImagePath;
}
exports.getWaveImagePath = getWaveImagePath;

/**
     * 根据模块名找到对应的模块信息
     * 
     * @param  HDLparam         匹配的文本
*/
function findModule (HDLparam, ModuleInfo) {
    let moduleInfo = [];
    HDLparam.forEach(unitMoudule => {
        if (unitMoudule.moduleName == ModuleInfo.split("    .")[0] && 
            unitMoudule.modulePath.indexOf(ModuleInfo.split("    .")[1]) != -1) {
            moduleInfo.push(unitMoudule);
        }
    });
    return moduleInfo;
}
exports.findModule = findModule;

/**
     * 更新所有模块下所有模块信息 : 名字 + 相对路径
     * 
     * @param  HDLparam         匹配的文本
*/
function refreshModuleInfoList (HDLparam, workspace_path) {
    let ModuleNameList = [];
    HDLparam.forEach(unitMoudule => {
        let ModuleInfo = unitMoudule.moduleName + "    ." +
                         unitMoudule.modulePath.replace(workspace_path,"");
        ModuleNameList.push(ModuleInfo);
    });
    return ModuleNameList;
}
exports.refreshModuleInfoList = refreshModuleInfoList;

/**
     * 更新所有模块下所例化模块的路径
     * 
     * @param  HDLparam         匹配的文本
*/
function refreshInstModulePath (HDLparam) {
    HDLparam.forEach(unitMoudule => {
        unitMoudule.instmodule.forEach(unitInstanceModule => {
            HDLparam.forEach(element => {
                if (element.moduleName == unitInstanceModule.instModule) {
                    unitInstanceModule.instModPath = element.modulePath;
                }
            }); 
        });
    });
}
exports.refreshInstModulePath = refreshInstModulePath;

/**
     * 从HDL属性数组中去除当前文件中所包含的HDL属性
     * 
     * @param  document     匹配文本所在的文档属性
     * @param  HDLparam     匹配的文本
     * @return 返回新的HDL属性数组
*/
function removeCurrentFileParam (document, HDLparam) {
    let currentFilePath = document.uri._fsPath.replace(/\\/g,"\/");
    let newHDLparam = [];
    HDLparam.forEach(element => {
        if (element.modulePath != currentFilePath) {
            newHDLparam.push(element);
        }
    });
    return newHDLparam;
}
exports.removeCurrentFileParam = removeCurrentFileParam;
